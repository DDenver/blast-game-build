{"version":3,"sources":["assets/scripts/Plugins/TransformComponent/Accessories/Components/AnchorComponent.ts","assets/scripts/Booster/BoosterConfig.ts","assets/scripts/Booster/BoosterInput.ts","assets/scripts/Booster/BoosterManager.ts","assets/scripts/Booster/BoosterRenderer.ts","assets/scripts/Booster/BoosterTypes.ts","assets/scripts/Booster/Booster.ts","assets/scripts/UI/Button.ts","assets/scripts/UI/Counter/CounterRenderer.ts","assets/scripts/UI/Counter/Counter.ts","assets/scripts/Enums/EasingType.ts","assets/scripts/Enums/Events.ts","assets/scripts/Field/FieldCreator.ts","assets/scripts/Field/FieldInput.ts","assets/scripts/Field/FieldStates/FieldStateAreaDestroy.ts","assets/scripts/Field/FieldStates/FieldStateCreation.ts","assets/scripts/Field/FieldStates/FieldStateDestroyByColor.ts","assets/scripts/Field/FieldStates/FieldStateFallTiles.ts","assets/scripts/Field/FieldStates/FieldStateLineDestroy.ts","assets/scripts/Field/FieldStates/FieldStateMixTiles.ts","assets/scripts/Field/FieldStates/FieldStateSwap.ts","assets/scripts/Field/FieldStates/FieldState.ts","assets/scripts/Field/FieldUtils.ts","assets/scripts/Field/Field.ts","assets/scripts/Field/FieldStates/FiledStateWaiting.ts","assets/scripts/GameManager.ts","assets/scripts/Plugins/Input/InputCatcher.ts","assets/scripts/Plugins/Input/InputManager.ts","assets/scripts/Plugins/Input/InputSources.ts","assets/scripts/Plugins/Input/InputTypes.ts","assets/scripts/Level/LevelBoosterConfig.ts","assets/scripts/Level/LevelConfig.ts","assets/scripts/Level/LevelManager.ts","assets/scripts/Level/LevelTileConfig.ts","assets/scripts/UI/MainMenu/MainMenuRenderer.ts","assets/scripts/UI/MainMenu/MainMenu.ts","assets/scripts/UI/PauseMenu/PauseMenuRenderer.ts","assets/scripts/UI/PauseMenu/PauseMenu.ts","assets/scripts/Plugins/TransformComponent/Accessories/Components/PositionComponent.ts","assets/scripts/UI/ProgressBar/ProgressBarRenderer.ts","assets/scripts/UI/ProgressBar/ProgressBar.ts","assets/scripts/UI/ResultMenu/ResultMenuRenderer.ts","assets/scripts/UI/ResultMenu/ResultMenu.ts","assets/scripts/Plugins/TransformComponent/Accessories/Components/RotationComponent.ts","assets/scripts/Plugins/TransformComponent/Accessories/Components/ScaleComponent.ts","assets/scripts/Enums/SceneNames.ts","assets/scripts/ScoreStorage.ts","assets/scripts/Plugins/Settings.ts","assets/scripts/Plugins/TransformComponent/Accessories/Base/SimpleTransformComponent.ts","assets/scripts/Plugins/TransformComponent/Accessories/Components/SizeComponent.ts","assets/scripts/Tile/TileAreaDestroy.ts","assets/scripts/Tile/TileColorDestroy.ts","assets/scripts/Tile/TileConstants.ts","assets/scripts/Tile/TileLineDestroy.ts","assets/scripts/Tile/TileRenderer.ts","assets/scripts/Tile/TilesCreator.ts","assets/scripts/Tile/TilesPool.ts","assets/scripts/Tile/Tile.ts","assets/scripts/Plugins/TransformComponent/TransformComponent.ts","assets/scripts/Plugins/TransformComponent/Accessories/TransformController.ts","assets/scripts/Plugins/Utilities.ts","assets/scripts/Plugins/TransformComponent/Accessories/Components/VisibilityComponent.ts"],"names":["SimpleTransformComponent_1","require","_a","cc","_decorator","ccclass","property","AnchorConfiguration","this","anchor","v2","prototype","applyTransform","node","setAnchorPoint","getData","clone","applyData","data","__decorate","Vec2","AnchorComponent","_super","_this","apply","arguments","configuration","__extends","execute","reset","isActive","type","serializable","visible","default","exports","BoosterTypes_1","BoosterConfig","BoosterTypes","Boomb","icon","startCount","radius","Enum","SpriteFrame","Integer","InputManager_1","InputSources_1","InputTypes_1","BoosterInput","booster","isEnable","getInstance","on","Down","onInput","enable","disable","touchSource","BoosterButton","eventTouch","target","Node","onTap","Booster_1","BoosterConfig_1","BoosterManager","boosters","boosterIconsConfigs","_activeBoosterPayload","activeBooster","Object","defineProperty","get","init","configs","forEach","i","apllyconfig","find","b","toggleEnableBoosters","activateBooster","getBoosterPayload","useActiveBooster","use","payload","config","MegaBoomb","Component","EasingType_1","BoosterRenderer","counter","easing","quadInOut","tween","tweenDuration","count","spriteFrame","setCount","string","activate","playScaleTween","deactivate","scale","opacity","stop","to","start","Sprite","Label","BoosterInput_1","BoosterRenderer_1","Booster","manager","renderer","input","getComponent","getCount","InputCatcher_1","Button","holder","inputCatcher","duration","onLoad","onDown","Up","onUp","inputSource","quadIn","quadOut","CounterRenderer","labalValue","setValue","v","CounterRenderer_1","Counter","startValue","currentValue","incrementValue","threshold","callback","_thresholdReached","updateValue","multiplier","delta","getCurrentValue","EasingType","Events","Events_1","TileConstants_1","FieldUtils_1","FieldCreator","field","map","crateField","y","instance","fieldSize","height","push","x","width","tile","tilesCreator","getTileColorDestroy","tileWordPos","getMapToWorldPos","setPosition","show","getTileByCoords","coords","getNeighbors","ownPos","getPositionOnMap","getPosition","checkPos","neighbors","pos","neighbor","add","needMatch","getAllTiles","tiles","length","getRow","rowIndex","__spreadArrays","getCol","colIndex","col","removeTiles","systemEvent","emit","UPDATE_SCORE","toString","removeTile","updateMap","__awaiter","Promise","maxFallTime","newMapPos","fallTime","Math","min","fallSpeed","fallTimeLimit","max","fallTile","easingFall","newTile","waitTimer","sent","addTileOnMap","posOnMap","ability","typeDestroy","isRandom","TileAbilityTypes","AreaDestroy","getTileAreaDestroy","LineDestroy","getTileLineDestroy","swapTiles","tileFirst","tileSecond","tileFirstPos","tileSecondPos","tileFirstOnMap","tileSecondOnMap","swap","mapPos","time","worldPos","fallDown","remove","FieldInput","off","Field","touchPos","getLocation","getTouchOnMap","fieldCreator","tapToTile","FieldState_1","FieldStateFallTiles_1","FieldStateAreaDestroy","enterToState","getDestroyType","Default","All","removeArea","getRadius","_b","focusTile","boosterManager","activeBoosterPayload","STEP_COMPLETED","setState","waveTiles","j","n","FiledStateWaiting_1","FieldStateCreation","fieldInput","FieldStateDestroyByColor","siblings","getSiblingsByColor","matchCount","cantMatching","matchingCountForUpgrade","upgradeTile","matchingCount","tileAbility","addUpgradedTile","FieldStateMixTiles_1","FieldStateFallTiles","checkToMix","FieldStateLineDestroy","Horizontal","Vertical","line","removeLine","iteration","iterationTime","round","firstSide","secondSide","VerticalLineDestroy","HorizontalLineDestroy","FieldStateMixTiles","FieldStateSwap","focus","Utilities_1","FieldUtils","_fieldSize","Size","_tileScale","tileSize","tileScaledSize","offset","ZERO","fieldWorldSize","startPoint","ONE","_instance","conputeFieldParams","localNodePos","convertToNodeSpaceAR","deltaX","deltaY","nearPoin","distanceX","distanceY","posX","posY","getContentSize","scaleX","scaleY","minScale","multiplySizeByScalar","offsetX","offsetY","startPointX","startPointY","BoosterManager_1","TileColorDestroy_1","TilesCreator_1","FieldCreator_1","FieldInput_1","FieldStateCreation_1","bounceOut","state","res","scheduleOnce","needCheck","currentTile","pop","allTiles","_loop_1","this_1","some","checkSameColor","value","state_1","firstTile","secondTile","Float","FieldStateAreaDestroy_1","FieldStateDestroyByColor_1","FieldStateLineDestroy_1","FieldStateSwap_1","FiledStateWaiting","None","Swap","ColorDestroy","SceneNames_1","LevelConfig_1","Settings_1","ScoreStorage_1","GameManager","levelsConfig","settings","currentLevel","subscribeEvents","game","addPersistRootNode","windowResized","view","setResizeCallback","NEW_GAME","newGame","RESTART_GAME","restartGame","COMPLETE_LEVEL","completeLevel","FAIL_LEVEL","failLevel","LEAVE_LEVEL","leaveLevel","NEXT_LEVEL","nextLevel","MAIN_MENU","mainMenu","updateSettings","WINDOW_RESIZED","loadScene","name","MAIN","director","console","log","GAME","START_LEVEL","saveResultData","RESULT","SHOW_RESULT","nextLevelConfig","getRandomElementFromArray","score","newData","steps","level","save","LevelConfig","menu","InputCather","onEnable","toggleSubscribe","onDisable","isOn","onMove","INPUT","Move","InputManager","call","isLockedMultiTouch","currentTouchID","key","useCapture","getID","EventTarget","InputSources","InputTypes","LevelBoosterConfig","override","LevelBoosterConfig_1","LevelTileConfig_1","scoreStep","LevelTileConfig","Field_1","Counter_1","PauseMenu_1","ProgressBar_1","LevelManager","pauseMenu","scoreCounter","stepsCounter","progressBar","levelNumber","onStartLevel","onUpdateScore","onStepCompleted","pause","resume","leave","isFail","goal","updateProgress","isGoalComplete","isNextLevel","thresholdReached","TileAreaDestroy_1","TileAreaConfig","MainMenuRenderer","modalMenu","modalAchievements","labelLevel","labelSteps","labelScore","showMenu","playAnimation","showAchievements","MainMenuRenderer_1","MainMenu","isInputActive","AchievementsButton","NewGameButton","MenuOkButton","PauseMenuRenderer","pauseModal","active","showModal","hideModal","PauseMenuRenderer_1","PauseMenu","levelManager","PauseButton","ResumeButton","ExitButton","PositionType","LayerType","PositionConfiguration","positionType","Relative","layer","UI","position","transformReference","isCondsiderReferenceScale","newPosition","targetPosition","referenceSize","checkTransformReference","calculateReferenceSize","calculatePositionByRefSize","Absolute","mul","SCALE","applyOffset","applyPosition","size","GAME_WIDTH","GAME_HEIGHT","World","WORLD_HEIGHT","WORLD_WIDTH","addSelf","relativePositon","PositionComponent","ProgressBarRenderer","fillLine","speed","startLinePosX","lineWidth","setProgress","progress","nextPosX","clamp","newPos","ProgressBarRenderer_1","ProgressBar","currentProgress","_isGoalComplete","ResultMenuRenderer","levelWin","levelNumberLabel","stepsLabel","scoreWinLabel","levelFail","scoreFailLabel","titleFailLabel","showWinModal","showFailModal","ResultMenuRenderer_1","ResultMenu","onShowResult","ResultHomeButton","ResultNextLeveleButton","ResultOkButton","RotationConfiguration","rotation","angle","RotationComponent","ProportionType","FitMode","SizeMode","ScaleConfiguration","sizeMode","fitMode","Inscribe","desiredSize","padding","newScale","actualDesiredSize","calculateActualSize","targetScale","calculateTargetScale","necessaryScale","currentNodeScale","ts","Describe","FitHeight","FitWidth","Unproportional","Constant","calculateSizeByRelativeSize","sub","relativeSize","ScaleComponent","SceneNames","ScoreStorage","storageName","localStorage","setItem","JSON","stringify","getItem","parse","Settings","default_width","default_height","game_width","game_height","is_landscape","half_width","half_heigth","world_width","world_height","undefined","set","winSize","calculateScale","chooseDefaultHeight","IS_LANDSCAPE","DEFAULT_HEIGHT","DEFAULT_WIDTH","chooseDefaultWidth","widthRatio","heightRatio","SimpleTransformComponent","_isActive","configurationData","SizeConfiguration","SizeComponent","Tile_1","TileConfig","TileAreaDestroy","initData","tileRenderer","setSpriteFrame","TileColorConfig","Red","TileColorDestroy","TileLineConfig","TileLineDestroy","AnimationNames","AnimationEvents","TileRenderer","animation","moveTween","swapPos","Animation","setScale","useAnim","play","Show","hide","Hide","playFocusAnim","Focus","playSwapAnim","playCantMatching","CantMatching","moveTo","linear","Tween","convertToVec3","once","EventType","FINISHED","animationEventHandler","e","TileLineDestroy_1","TilesPool_1","TilesCreator","tileColorPrefab","tileLinePrefab","tileAreaPrefab","tileColorConig","tileLineConig","tileAreaConig","parentNode","tilesConig","colorTilesCount","tac","c","tileColorPool","tileLinePool","tileAreaPool","TILE_REMOVED","tileRemove","Blue","getTile","getRandomEnumKey","t","addTile","Prefab","TilesPool","prefab","componentName","defaulSize","defaultPos","pool","initElemnts","el","tileNode","instantiate","setParent","tileScale","TileRenderer_1","Tile","TransformController_1","TransformComponent","_isSameTransform","_isDependingOnSideRatio","limitSideRatio","commonTransform","commonTransformBelowSideRatio","landscapeTransform","landscapeTransformBelowSideRatio","portraitTransform","portraitTransformBelowSideRatio","isDependingOnSideRatio","isSameTransform","onSizeChanged","getCurrentTransform","sideRatio","isUsingTransformBelowSideRatio","setNodeTransform","TransformComponentType","AnchorComponent_1","PositionComponent_1","RotationComponent_1","ScaleComponent_1","SizeComponent_1","TransformController","changeValueType","positionComponent","scaleComponent","rotationComponent","anchorComponent","sizeComponent","_transformReference","a","isPreferredTypeSelected","Position","Scale","Rotation","Anchor","Utilities","randomItem","items","floor","random","getRandomInt","ceil","getRandomFloat","array","z","Vec3","getEnumKeys","keys","k","s1","VisibilityConfiguration","color","Color","VisibilityComponent"],"mappings":"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","sourcesContent":["import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('AnchorConfiguration')\r\nclass AnchorConfiguration implements IConfiguration {\r\n    @property(cc.Vec2) anchor: cc.Vec2 = cc.v2(.5, .5);\r\n\r\n    public applyTransform(node: cc.Node) {\r\n        node.setAnchorPoint(this.anchor);\r\n    }\r\n\r\n    public getData() {\r\n        return { anchor: this.anchor.clone() };\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.anchor = data.anchor;\r\n    }\r\n}\r\n\r\n\r\n@ccclass('AnchorComponent')\r\nexport default class AnchorComponent extends SimpleTransformComponent {\r\n\r\n    @property({ type: AnchorConfiguration, serializable: true, visible() { return this.isActive } }) configuration: AnchorConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new AnchorConfiguration() : null;\r\n    }\r\n\r\n}\r\n","import { BoosterTypes } from './BoosterTypes';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('BoosterConfig')\nexport class BoosterConfig {\n    @property({ type: cc.Enum(BoosterTypes) }) type: BoosterTypes = BoosterTypes.Boomb\n    @property({ type: cc.SpriteFrame }) icon: cc.SpriteFrame = null;\n\n    @property({ type: cc.Integer }) startCount: number = 0;\n\n    @property({\n        type: cc.Integer,\n        visible: false,\n    }) radius: number = 0;\n}\n","import InputManager from '../Plugins/Input/InputManager';\nimport { InputManagerData } from '../Plugins/Input/InputManagerData';\nimport InputSources from '../Plugins/Input/InputSources';\nimport InputTypes from '../Plugins/Input/InputTypes';\nimport Booster from './Booster';\nimport IBoosterInput from './Interface/IBoosterInput';\n\nexport default class BoosterInput implements IBoosterInput {\n\n    private booster: Booster = null;\n    private isEnable: boolean = false;\n\n    constructor(booster: Booster) {\n        this.booster = booster;\n\n        InputManager.getInstance().on(InputTypes.Down, this.onInput, this);\n    }\n\n    public enable(): void {\n        this.isEnable = true;\n    }\n\n    public disable(): void {\n        this.isEnable = false;\n    }\n\n    private onInput(data: InputManagerData): void {\n        if (\n            data.touchSource === InputSources.BoosterButton\n            && this.isEnable\n            && data.eventTouch.target instanceof cc.Node\n            && this.booster.node === data.eventTouch.target\n        ) {\n            this.booster.onTap();\n        }\n    }\n}\n","import { LevelBoosterConfig } from '../Level/LevelBoosterConfig';\nimport Booster from './Booster';\nimport { BoosterConfig } from './BoosterConfig';\nimport { BoosterTypes } from './BoosterTypes';\nimport IBooster from './Interface/IBooster';\nimport IBoosterManager from './Interface/IBoosterManager';\nimport IBoosterPayload from './Interface/IBoosterPayload';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BoosterManager extends cc.Component implements IBoosterManager {\n    @property(Booster) boosters: IBooster[] = [];\n    @property(BoosterConfig) boosterIconsConfigs: BoosterConfig[] = [];\n\n    private _activeBoosterPayload: IBoosterPayload = null;\n    get activeBoosterPayload(): IBoosterPayload {\n        return this._activeBoosterPayload;\n    }\n\n    private activeBooster: IBooster = null;\n\n    public init(configs: LevelBoosterConfig[]): void {\n\n        this.boosters.forEach((booster, i) => {\n            const apllyconfig: BoosterConfig = {\n                type: configs[i].type,\n                icon: this.boosterIconsConfigs.find(b => b.type === configs[i].type).icon,\n                startCount: configs[i].startCount,\n                radius: configs[i].radius,\n            }\n            booster.init(this, apllyconfig);\n        });\n    }\n\n    public enable(): void {\n        this.toggleEnableBoosters(true);\n    }\n\n    public disable(): void {\n        this.toggleEnableBoosters(false);\n    }\n\n    public activateBooster(booster: IBooster): void {\n        this._activeBoosterPayload = this.getBoosterPayload(booster);\n        this.activeBooster = booster;\n        this.toggleEnableBoosters(false);\n    }\n\n    public useActiveBooster(): void {\n        this._activeBoosterPayload = null;\n        this.toggleEnableBoosters(true);\n        this.activeBooster.use();\n    }\n\n    private toggleEnableBoosters(isEnable: boolean): void {\n        this.boosters.forEach((booster) => {\n            if (isEnable) {\n                booster.enable();\n            } else {\n                booster.disable();\n            }\n        })\n    }\n\n    private getBoosterPayload(booster: IBooster): IBoosterPayload {\n        const payload: IBoosterPayload = {\n            type: booster.config.type,\n        }\n\n        switch (booster.config.type) {\n            case BoosterTypes.Boomb:\n                payload.radius = 4;\n                break;\n            case BoosterTypes.MegaBoomb:\n                payload.radius = -1;\n                break;\n            default:\n                break;\n        }\n\n        return payload;\n    }\n}\n","import EasingType from '../Enums/EasingType';\nimport IBoosterRenderer from './Interface/IBoosterRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BoosterRenderer extends cc.Component implements IBoosterRenderer {\n    @property(cc.Sprite) icon: cc.Sprite = null;\n\n    @property(cc.Label) counter: cc.Label = null;\n\n    @property({ type: cc.Enum(EasingType) }) easing: EasingType = EasingType.quadInOut;\n\n\n    private tween: cc.Tween<cc.Node> = null;\n    private tweenDuration: number = 0.2;\n\n    public init(icon: cc.SpriteFrame, count: number): void {\n        this.icon.spriteFrame = icon;\n        this.setCount(count);\n    }\n\n    public setCount(count: number): void {\n        this.counter.string = '' + count;\n    }\n\n    public activate(): void {\n        this.playScaleTween(1.3, 127);\n    }\n\n    public deactivate(): void {\n        this.playScaleTween(1, 255);\n    }\n\n    private playScaleTween(scale: number, opacity: number): void {\n        if (this.tween) this.tween.stop();\n\n        this.tween = cc.tween<cc.Node>(this.icon.node).to(this.tweenDuration,\n            { scale, opacity },\n            { easing: cc.easing[EasingType[this.easing]] }\n        ).start();\n    }\n}\n","export enum BoosterTypes {\n    None,\n    VerticalLineDestroy,\n    HorizontalLineDestroy,\n    Boomb,\n    MegaBoomb,\n    Swap,\n}\n","import { BoosterConfig } from './BoosterConfig';\nimport BoosterInput from './BoosterInput';\nimport BoosterRenderer from './BoosterRenderer';\nimport IBooster from './Interface/IBooster';\nimport IBoosterManager from './Interface/IBoosterManager';\nimport IBoosterRenderer from './Interface/IBoosterRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Booster extends cc.Component implements IBooster {\n    @property(BoosterConfig) config: BoosterConfig = null;\n\n    private manager: IBoosterManager = null;\n    private renderer: IBoosterRenderer = null;\n    private input: BoosterInput = null;\n\n    private counter: number;\n\n    public init(manager: IBoosterManager, config: BoosterConfig): void {\n        this.manager = manager;\n\n        this.counter = config.startCount;\n        this.config.startCount = config.startCount;\n        this.config.type = config.type;\n\n        this.renderer = this.node.getComponent(BoosterRenderer);\n        this.renderer.init(config.icon, this.counter);\n\n        this.input = new BoosterInput(this);\n    }\n\n    public getCount(): number {\n        return this.counter;\n    }\n\n    public enable(): void {\n        this.input.enable();\n    }\n\n    public disable(): void {\n        this.input.disable();\n    }\n\n    public use(): void {\n        this.counter--;\n        this.renderer.setCount(this.counter);\n        this.renderer.deactivate();\n    }\n\n    public onTap(): void {\n        if (this.counter === 0) return;\n\n        this.renderer.activate();\n        this.manager.activateBooster(this);\n    }\n}\n","import EasingType from '../Enums/EasingType';\nimport InputCather from '../Plugins/Input/InputCatcher';\nimport InputManager from '../Plugins/Input/InputManager';\nimport { InputManagerData } from '../Plugins/Input/InputManagerData';\nimport InputTypes from '../Plugins/Input/InputTypes';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Button extends cc.Component {\n    @property(cc.Node) holder: cc.Node = null;\n\n    private inputCatcher: InputCather = null;\n    private tween: cc.Tween<cc.Node> = null;\n    private duration: number = 0.15;\n\n    onLoad() {\n        this.inputCatcher = this.node.getComponent(InputCather);\n        InputManager.getInstance().on(InputTypes.Down, this.onDown, this);\n        InputManager.getInstance().on(InputTypes.Up, this.onUp, this);\n    }\n\n    private onDown(data: InputManagerData): void {\n        if (data.touchSource !== this.inputCatcher.inputSource) return;\n\n        if (this.tween) this.tween.stop();\n\n        this.tween = cc.tween<cc.Node>(this.holder || this.node).to(this.duration,\n            { scale: 0.9 },\n            { easing: cc.easing[EasingType.quadIn] }\n        ).start();\n    }\n\n    private onUp(data: InputManagerData): void {\n        if (data.touchSource !== this.inputCatcher.inputSource) return;\n\n        if (this.tween) this.tween.stop();\n\n        this.tween = cc.tween<cc.Node>(this.holder || this.node).to(this.duration,\n            { scale: 1 },\n            { easing: cc.easing[EasingType.quadOut] }\n        ).start();\n    }\n\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CounterRenderer extends cc.Component {\n    @property(cc.Label) labalValue: cc.Label = null;\n\n    public setValue(v: number): void {\n        this.labalValue.string = '' + v;\n    }\n}\n","import CounterRenderer from './CounterRenderer';\nimport { ICounterInitData } from './ICounterInitData';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Counter extends cc.Component {\n    private renderer: CounterRenderer = null;\n\n    private startValue: number = 0;\n    private currentValue: number = 0;\n    private incrementValue: number = 0;\n\n    private threshold: number = 0;\n    private callback: () => void = null;\n\n    private _thresholdReached: boolean = false;\n    public get thresholdReached(): boolean {\n        return this._thresholdReached;\n    }\n\n    onLoad() {\n        this.renderer = this.node.getComponent(CounterRenderer);\n    }\n\n    public init(data: ICounterInitData): void {\n        this.startValue = data.startValue;\n        this.currentValue = data.startValue;\n        this.incrementValue = data.incrementValue;\n\n        this.threshold = data?.threshold;\n        this.callback = data?.callback;\n\n        this.renderer.setValue(this.currentValue);\n        this._thresholdReached = false;\n    }\n\n    public updateValue(multiplier: number = 1): void {\n        this.currentValue += this.incrementValue * multiplier;\n\n        if (this.callback) {\n            const delta = this.threshold - this.startValue;\n\n            if ((delta > 0 && this.currentValue >= this.threshold)\n                || (delta < 0 && this.currentValue <= this.threshold)\n            ) {\n                this._thresholdReached = true;\n                this.callback();\n            };\n        }\n\n        this.renderer.setValue(this.currentValue);\n    }\n\n    public getCurrentValue(): number {\n        return this.currentValue;\n    }\n\n}\n","enum EasingType {\r\n\tconstant,\r\n\tlinear,\r\n\r\n\tfade,\r\n\tsmooth,\r\n\r\n\tbackIn,\r\n\tbackInOut,\r\n\tbackOut,\r\n\r\n\tbounceIn,\r\n\tbounceInOut,\r\n\tbounceOut,\r\n\r\n\tcircIn,\r\n\tcircInOut,\r\n\tcircOut,\r\n\r\n\tcubicIn,\r\n\tcubicInOut,\r\n\tcubicOut,\r\n\r\n\telasticIn,\r\n\telasticInOut,\r\n\telasticOut,\r\n\r\n\texpoIn,\r\n\texpoInOut,\r\n\texpoOut,\r\n\r\n\tquadIn,\r\n\tquadInOut,\r\n\tquadOut,\r\n\r\n\tquartIn,\r\n\tquartInOut,\r\n\tquartOut,\r\n\r\n\tquintIn,\r\n\tquintInOut,\r\n\tquintOut,\r\n\r\n\tsineIn,\r\n\tsineInOut,\r\n\tsineOut,\r\n}\r\n\r\nexport default EasingType;","enum Events {\r\n    WINDOW_RESIZED,\r\n\r\n    INPUT,\r\n\r\n    NEW_GAME,\r\n    RESTART_GAME,\r\n    COMPLETE_LEVEL,\r\n    FAIL_LEVEL,\r\n    LEAVE_LEVEL,\r\n    NEXT_LEVEL,\r\n    MAIN_MENU,\r\n\r\n    START_LEVEL,\r\n    SHOW_RESULT,\r\n\r\n    UPDATE_SCORE,\r\n    STEP_COMPLETED,\r\n    TILE_REMOVED,\r\n}\r\n\r\nexport default Events;","import EasingType from '../Enums/EasingType';\r\nimport Events from '../Enums/Events';\r\nimport Tile from '../Tile/Tile';\r\nimport { AreaDestroy, LineDestroy, TileAbilityTypes } from '../Tile/TileConstants';\r\nimport Field from './Field';\r\nimport FieldUtils from './FieldUtils';\r\n\r\nexport default class FieldCreator {\r\n    public field: Field;\r\n\r\n    private map: Tile[][] = [];\r\n\r\n    constructor(field) {\r\n        this.field = field;\r\n    }\r\n\r\n    public crateField(): void {\r\n        this.map = [];\r\n\r\n        for (let y = 0; y < FieldUtils.instance.fieldSize.height; y++) {\r\n            this.map.push([]);\r\n            for (let x = 0; x < FieldUtils.instance.fieldSize.width; x++) {\r\n                const tile = this.field.tilesCreator.getTileColorDestroy(true);\r\n                const tileWordPos = FieldUtils.instance.getMapToWorldPos(new cc.Vec2(x, y));\r\n                tile.setPosition(tileWordPos);\r\n                tile.show();\r\n\r\n                this.map[y].push(tile);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTileByCoords(coords: cc.Vec2): Tile {\r\n        if (!coords\r\n            || coords.x < 0\r\n            || coords.y < 0\r\n            || coords.x >= FieldUtils.instance.fieldSize.width\r\n            || coords.y >= FieldUtils.instance.fieldSize.height\r\n        ) return null;\r\n\r\n        return this.map[coords.y][coords.x];\r\n    }\r\n\r\n    public getNeighbors(tile: Tile): Tile[] {\r\n        const ownPos = FieldUtils.instance.getPositionOnMap(tile.getPosition());\r\n        const checkPos = [new cc.Vec2(0, 1), new cc.Vec2(1, 0), new cc.Vec2(0, -1), new cc.Vec2(-1, 0)];\r\n        const neighbors = [];\r\n\r\n        checkPos.forEach(pos => {\r\n            const neighbor = this.getTileByCoords(ownPos.clone().add(pos));\r\n\r\n            if (neighbor && !neighbor.needMatch) neighbors.push(neighbor);\r\n        })\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    public getAllTiles(): Tile[] {\r\n        const tiles = [];\r\n\r\n        for (let i = 0; i < this.map.length; i++) {\r\n            tiles.push(...this.map[i]);\r\n        }\r\n\r\n        return tiles;\r\n    }\r\n\r\n    public getRow(rowIndex: number): Tile[] {\r\n        return [...this.map[rowIndex]];\r\n    }\r\n\r\n    public getCol(colIndex: number): Tile[] {\r\n        const col = [];\r\n\r\n        for (let i = 0; i < FieldUtils.instance.fieldSize.height; i++) {\r\n            col.push(this.map[i][colIndex]);\r\n        }\r\n\r\n        return col;\r\n    }\r\n\r\n    public removeTiles(tiles: Tile[]): void {\r\n        cc.systemEvent.emit(Events.UPDATE_SCORE.toString(), tiles.length);\r\n        \r\n        tiles.forEach(tile => {\r\n            this.removeTile(tile);\r\n        });\r\n    }\r\n\r\n    public async updateMap(): Promise<void> {\r\n        let maxFallTime = 0;\r\n\r\n        for (let x = 0; x < FieldUtils.instance.fieldSize.width; x++) {\r\n            let counter = 0;\r\n\r\n            for (let y = FieldUtils.instance.fieldSize.height - 1; y >= 0; y--) {\r\n                const tile = this.map[y][x];\r\n\r\n                if (!tile) {\r\n                    counter++\r\n                } else {\r\n                    const newMapPos = y + counter;\r\n                    this.map[y][x] = null;\r\n\r\n                    const fallTime = Math.min(counter * this.field.fallSpeed, this.field.fallTimeLimit);\r\n                    maxFallTime = Math.max(fallTime, maxFallTime);\r\n                    this.fallTile(tile, new cc.Vec2(x, newMapPos), fallTime, this.field.easingFall);\r\n                };\r\n            }\r\n\r\n            for (let i = 1; i <= counter; i++) {\r\n                const newTile = this.field.tilesCreator.getTileColorDestroy(true);\r\n                const tileWordPos = FieldUtils.instance.getMapToWorldPos(new cc.Vec2(x, -(i)));\r\n                newTile.setPosition(tileWordPos);\r\n                newTile.show(false);\r\n\r\n                const fallTime = Math.min(counter * this.field.fallSpeed, this.field.fallTimeLimit);\r\n                maxFallTime = Math.max(fallTime, maxFallTime);\r\n                this.fallTile(newTile, new cc.Vec2(x, counter - (i)), fallTime, this.field.easingFall);\r\n            }\r\n        }\r\n\r\n        await this.field.waitTimer(maxFallTime);\r\n    }\r\n\r\n    public addTileOnMap(\r\n        posOnMap: cc.Vec2,\r\n        ability: TileAbilityTypes,\r\n        typeDestroy: LineDestroy | AreaDestroy\r\n    ): void {\r\n        let tile;\r\n        const isRandom = typeDestroy === null;\r\n\r\n        switch (ability) {\r\n            case TileAbilityTypes.AreaDestroy:\r\n                tile = this.field.tilesCreator.getTileAreaDestroy(isRandom, typeDestroy as AreaDestroy);\r\n                break;\r\n            case TileAbilityTypes.LineDestroy:\r\n                tile = this.field.tilesCreator.getTileLineDestroy(isRandom, typeDestroy as LineDestroy);\r\n                break;\r\n        }\r\n\r\n        tile.setPosition(FieldUtils.instance.getMapToWorldPos(posOnMap));\r\n        tile.show();\r\n\r\n        this.map[posOnMap.y][posOnMap.x] = tile;\r\n    }\r\n\r\n    public async swapTiles(tileFirst: Tile, tileSecond: Tile): Promise<void> {\r\n        const tileFirstPos = tileFirst.getPosition();\r\n        const tileSecondPos = tileSecond.getPosition();\r\n\r\n        const tileFirstOnMap = FieldUtils.instance.getPositionOnMap(tileFirstPos);\r\n        const tileSecondOnMap = FieldUtils.instance.getPositionOnMap(tileSecondPos);\r\n\r\n        this.map[tileFirstOnMap.y][tileFirstOnMap.x] = tileSecond;\r\n        this.map[tileSecondOnMap.y][tileSecondOnMap.x] = tileFirst;\r\n\r\n        tileFirst.swap(tileSecondPos);\r\n        await tileSecond.swap(tileFirstPos);\r\n    }\r\n\r\n    private fallTile(tile: Tile, mapPos: cc.Vec2, time: number, easing: EasingType): void {\r\n        const worldPos = FieldUtils.instance.getMapToWorldPos(mapPos);\r\n        tile.fallDown(worldPos, time, easing);\r\n        this.map[mapPos.y][mapPos.x] = tile;\r\n    }\r\n\r\n    private removeTile(tile: Tile): void {\r\n        if (!tile) return;\r\n        \r\n        const pos = FieldUtils.instance.getPositionOnMap(tile.getPosition());\r\n        this.map[pos.y][pos.x] = null;\r\n        tile.remove();\r\n    }\r\n}\r\n","import InputManager from '../Plugins/Input/InputManager';\nimport { InputManagerData } from '../Plugins/Input/InputManagerData';\nimport InputSources from '../Plugins/Input/InputSources';\nimport InputTypes from '../Plugins/Input/InputTypes';\nimport Field from './Field';\nimport FieldUtils from './FieldUtils';\n\nexport default class FieldInput {\n    public field: Field = null;\n\n    private isEnable: boolean = false;\n\n    constructor(field: Field) {\n        this.field = field;\n    }\n\n    public enable(): void {\n        this.isEnable = true;\n        InputManager.getInstance().on(InputTypes.Down, this.onInput, this);\n    }\n\n    public disable(): void {\n        this.isEnable = false;\n        InputManager.getInstance().off(InputTypes.Down, this.onInput, this);\n    }\n\n    public init(): void {\n        InputManager.getInstance().on(InputTypes.Down, this.onInput, this);\n    }\n\n    private onInput(data: InputManagerData): void {\n        if (!this.isEnable || data.touchSource !== InputSources.Field) return;\n        const touchPos = data.eventTouch.getLocation();\n\n        const mapPos = FieldUtils.instance.getTouchOnMap(touchPos);\n        const tile = this.field.fieldCreator.getTileByCoords(mapPos);\n        \n        if (tile) this.field.tapToTile(tile);\n    }\n}\n","import { BoosterTypes } from '../../Booster/BoosterTypes';\r\nimport Events from '../../Enums/Events';\r\nimport Tile from '../../Tile/Tile';\r\nimport TileAreaDestroy from '../../Tile/TileAreaDestroy';\r\nimport { AreaDestroy } from '../../Tile/TileConstants';\r\nimport FieldState from './FieldState';\r\nimport FieldStateFallTiles from './FieldStateFallTiles';\r\n\r\nexport default class FieldStateAreaDestroy extends FieldState {\r\n    tapToTile(tile: Tile): void { }\r\n\r\n    async enterToState(): Promise<void> {\r\n        switch (this.getDestroyType()) {\r\n            case AreaDestroy.Default:\r\n                await this.removeArea(this.getRadius());\r\n                break;\r\n            case AreaDestroy.All:\r\n                this.field.fieldCreator.removeTiles(this.field.fieldCreator.getAllTiles());\r\n                break;\r\n        }\r\n\r\n        this.field.focusTile = null;\r\n\r\n        if (this.field.boosterManager.activeBoosterPayload) this.field.boosterManager.useActiveBooster();\r\n\r\n        await this.field.waitTimer(0.25);// wait remove tiles\r\n        cc.systemEvent.emit(Events.STEP_COMPLETED.toString());\r\n        this.field.setState(new FieldStateFallTiles(this.field));\r\n    }\r\n\r\n    private async removeArea(radius: number): Promise<void> {\r\n        const neighbors = [];\r\n\r\n        for (let i = 0; i < radius; i++) {\r\n            const waveTiles = [];\r\n\r\n            if (i === 0) {\r\n                waveTiles.push(...this.getNeighbors(this.field.focusTile));\r\n            } else {\r\n                for (let j = 0; j < neighbors[i - 1].length; j++) {\r\n                    waveTiles.push(...this.getNeighbors(neighbors[i - 1][j]));\r\n                }\r\n            }\r\n\r\n            neighbors.push(waveTiles);\r\n        }\r\n\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            await this.field.waitTimer(0.025);// wait remove tiles\r\n            this.field.fieldCreator.removeTiles(neighbors[i]);\r\n        }\r\n    }\r\n\r\n    private getNeighbors(tile: Tile): Tile[] {\r\n        const neighbors = this.field.fieldCreator.getNeighbors(tile);\r\n        neighbors.forEach(n => n.needMatch = true);\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    private getDestroyType(): AreaDestroy {\r\n        if (\r\n            (this.field.boosterManager.activeBoosterPayload\r\n                && this.field.boosterManager.activeBoosterPayload.type === BoosterTypes.Boomb)\r\n            || (this.field.focusTile.config.typeDestroy as AreaDestroy) === AreaDestroy.Default\r\n        ) return AreaDestroy.Default;\r\n\r\n        if (\r\n            (this.field.boosterManager.activeBoosterPayload\r\n                && this.field.boosterManager.activeBoosterPayload.type === BoosterTypes.MegaBoomb)\r\n            || (this.field.focusTile.config.typeDestroy as AreaDestroy) === AreaDestroy.All\r\n        ) return AreaDestroy.All;\r\n\r\n        return AreaDestroy.Default;\r\n    }\r\n\r\n    private getRadius(): number {\r\n        return this.field.boosterManager.activeBoosterPayload ?\r\n            this.field.boosterManager.activeBoosterPayload.radius\r\n            : (this.field.focusTile as TileAreaDestroy).config.radius;\r\n    }\r\n}\r\n","import Tile from '../../Tile/Tile';\nimport FieldState from './FieldState';\nimport FiledStateWaiting from './FiledStateWaiting';\n\nexport default class FieldStateCreation extends FieldState {\n    tapToTile(tile: Tile): void { }\n\n    async enterToState(): Promise<void> {\n        this.field.fieldCreator.crateField();\n        await this.field.waitTimer(0.5);\n        this.field.fieldInput.enable();\n        \n        this.field.setState(new FiledStateWaiting(this.field));\n    }\n}\n\n","import Events from '../../Enums/Events';\nimport Tile from '../../Tile/Tile';\nimport TileColorDestroy from '../../Tile/TileColorDestroy';\nimport { AreaDestroy, TileAbilityTypes } from '../../Tile/TileConstants';\nimport FieldUtils from '../FieldUtils';\nimport FieldState from './FieldState';\nimport FieldStateFallTiles from './FieldStateFallTiles';\n\nexport default class FieldStateDestroyByColor extends FieldState {\n    tapToTile(tile: Tile): void { }\n\n    async enterToState(): Promise<void> {\n        const siblings = this.field.getSiblingsByColor(this.field.focusTile as TileColorDestroy);\n\n        if (siblings.length <= (this.field.focusTile as TileColorDestroy).config.matchCount - 1) {\n            await this.field.focusTile.cantMatching();\n            this.field.focusTile = null;\n        } else if (siblings.length >= this.field.matchingCountForUpgrade) {\n            await this.upgradeTile(siblings);\n            cc.systemEvent.emit(Events.STEP_COMPLETED.toString());\n        } else {\n            await this.removeTiles(siblings);\n            cc.systemEvent.emit(Events.STEP_COMPLETED.toString());\n        }\n\n        this.field.setState(new FieldStateFallTiles(this.field));\n    }\n\n    private async upgradeTile(siblings: Tile[]): Promise<void> {\n        let tileAbility;\n        let typeDestroy = null;\n        const matchingCount = siblings.length;\n\n        if (matchingCount === 4) {\n            tileAbility = TileAbilityTypes.LineDestroy;\n        } else if (matchingCount > 4 && matchingCount <= 6) {\n            tileAbility = TileAbilityTypes.AreaDestroy;\n            typeDestroy = AreaDestroy.Default;\n        } else if (matchingCount > 6) {\n            tileAbility = TileAbilityTypes.AreaDestroy;\n            typeDestroy = AreaDestroy.All;\n        }\n\n        const posOnMap = FieldUtils.instance.getPositionOnMap(this.field.focusTile.getPosition());\n        await this.removeTiles(siblings);\n\n        this.field.addUpgradedTile(posOnMap, tileAbility, typeDestroy);\n    }\n\n    private async removeTiles(tiles: Tile[]): Promise<void> {\n        this.field.fieldCreator.removeTiles(tiles);\n        this.field.focusTile = null;\n        await this.field.waitTimer(0.25);// wait remove tiles\n    }\n}\n","import Tile from '../../Tile/Tile';\r\nimport FieldState from './FieldState';\r\nimport FieldStateMixTiles from './FieldStateMixTiles';\r\nimport FiledStateWaiting from './FiledStateWaiting';\r\n\r\nexport default class FieldStateFallTiles extends FieldState {\r\n    tapToTile(tile: Tile): void { }\r\n\r\n    async enterToState(): Promise<void> {\r\n        await this.field.fieldCreator.updateMap();\r\n\r\n        if (this.field.checkToMix()) {\r\n            this.field.setState(new FieldStateMixTiles(this.field));\r\n        } else {\r\n            this.field.setState(new FiledStateWaiting(this.field));\r\n        }\r\n    }\r\n}\r\n","import { BoosterTypes } from '../../Booster/BoosterTypes';\r\nimport Events from '../../Enums/Events';\r\nimport Tile from '../../Tile/Tile';\r\nimport { LineDestroy } from '../../Tile/TileConstants';\r\nimport FieldUtils from '../FieldUtils';\r\nimport FieldState from './FieldState';\r\nimport FieldStateFallTiles from './FieldStateFallTiles';\r\n\r\nexport default class FieldStateLineDestroy extends FieldState {\r\n    tapToTile(tile: Tile): void { }\r\n\r\n    async enterToState(): Promise<void> {\r\n        let line;\r\n        const posOnMap = FieldUtils.instance.getPositionOnMap(this.field.focusTile.getPosition());\r\n\r\n\r\n        switch (this.getDestroyType()) {\r\n            case LineDestroy.Horizontal:\r\n                line = this.field.fieldCreator.getRow(posOnMap.y);\r\n                await this.removeLine(line, posOnMap.x);\r\n                break;\r\n            case LineDestroy.Vertical:\r\n                line = this.field.fieldCreator.getCol(posOnMap.x);\r\n                await this.removeLine(line, posOnMap.y);\r\n                break;\r\n        }\r\n\r\n        this.field.focusTile = null;\r\n\r\n        if (this.field.boosterManager.activeBoosterPayload) this.field.boosterManager.useActiveBooster();\r\n\r\n        await this.field.waitTimer(0.25);// wait remove tiles\r\n        cc.systemEvent.emit(Events.STEP_COMPLETED.toString());\r\n        this.field.setState(new FieldStateFallTiles(this.field));\r\n    }\r\n\r\n    private async removeLine(line: Tile[], pos: number): Promise<void> {\r\n        let iteration = 0;\r\n        let iterationTime = 0.025;\r\n        iteration = Math.round(Math.max(pos, line.length - pos)) + 1;\r\n\r\n        for (let i = 0; i < iteration; i++) {\r\n            if (i === 0) {\r\n                this.field.fieldCreator.removeTiles([line[pos]]);\r\n            } else {\r\n                const firstSide = line[pos + i];\r\n                const secondSide = line[pos - i];\r\n\r\n                if (firstSide) this.field.fieldCreator.removeTiles([firstSide]);\r\n                if (secondSide) this.field.fieldCreator.removeTiles([secondSide]);\r\n            }\r\n            await this.field.waitTimer(iterationTime);// wait remove tiles\r\n        }\r\n    }\r\n\r\n    private getDestroyType(): LineDestroy {\r\n        if (\r\n            (this.field.boosterManager.activeBoosterPayload\r\n                && this.field.boosterManager.activeBoosterPayload.type === BoosterTypes.VerticalLineDestroy)\r\n            || (this.field.focusTile.config.typeDestroy as LineDestroy) === LineDestroy.Vertical\r\n        ) return LineDestroy.Vertical;\r\n\r\n        if (\r\n            (this.field.boosterManager.activeBoosterPayload\r\n                && this.field.boosterManager.activeBoosterPayload.type === BoosterTypes.HorizontalLineDestroy)\r\n            || (this.field.focusTile.config.typeDestroy as LineDestroy) === LineDestroy.Horizontal\r\n        ) return LineDestroy.Horizontal;\r\n\r\n        return LineDestroy.Horizontal;\r\n    }\r\n}\r\n","import Tile from '../../Tile/Tile';\nimport FieldState from './FieldState';\nimport FiledStateWaiting from './FiledStateWaiting';\n\nexport default class FieldStateMixTiles extends FieldState {\n    tapToTile(tile: Tile): void { }\n\n    async enterToState(): Promise<void> {\n        this.field.fieldCreator.removeTiles(this.field.fieldCreator.getAllTiles());\n\n        await this.field.waitTimer(0.3);// wait remove tiles\n\n        this.field.fieldCreator.crateField();\n\n        await this.field.waitTimer(0.3);// wait remove tiles\n\n        this.field.setState(new FiledStateWaiting(this.field));\n    }\n}\n","import Events from '../../Enums/Events';\nimport Tile from '../../Tile/Tile';\nimport FieldState from './FieldState';\nimport FiledStateWaiting from './FiledStateWaiting';\n\nexport default class FieldStateSwap extends FieldState {\n    async tapToTile(tile: Tile): Promise<void> {\n        await tile.focus();\n        await this.field.fieldCreator.swapTiles(tile, this.field.focusTile);\n\n        this.field.focusTile = null;\n\n        this.field.boosterManager.useActiveBooster();\n        cc.systemEvent.emit(Events.STEP_COMPLETED.toString());\n        this.field.setState(new FiledStateWaiting(this.field));\n    }\n\n    async enterToState(): Promise<void> {\n        await this.field.focusTile.focus();\n    }\n}\n","import Tile from '../../Tile/Tile';\nimport Field from '../Field';\nimport IFieldState from './IFiledState';\n\nexport default abstract class FieldState implements IFieldState {\n    protected field: Field;\n\n    constructor(field: Field) {\n        this.field = field;\n    }\n\n    abstract tapToTile(tile: Tile): void\n    abstract enterToState(): void \n}\n","import Utilities from '../Plugins/Utilities';\nimport Field from './Field';\n\nexport default class FieldUtils {\n    private static _instance: FieldUtils = null;\n    public static get instance(): FieldUtils {\n        return this._instance;\n    }\n\n    private _fieldSize: cc.Size = new cc.Size(7, 7);\n    public get fieldSize(): cc.Size {\n        return this._fieldSize;\n    }\n\n    private _tileScale: number = 1;\n    public get tileScale(): number {\n        return this._tileScale;\n    }\n\n    private field: Field;\n\n    private tileSize: cc.Size = new cc.Size(171, 192);\n    private tileScaledSize: cc.Size = new cc.Size(171, 192);\n    private offset: cc.Vec2 = cc.Vec2.ZERO;\n    private fieldWorldSize: cc.Size = cc.Size.ZERO;\n    private startPoint: cc.Vec2 = cc.Vec2.ONE;\n\n    constructor() {\n        if (FieldUtils.instance !== null) {\n            return FieldUtils.instance;\n        }\n\n        FieldUtils._instance = this;\n    }\n\n    public init(field: Field, fieldSize: cc.Size): void {\n        this.field = field;\n        this._fieldSize = fieldSize;\n\n        this.conputeFieldParams();\n    }\n\n    public getTouchOnMap(touchPos: cc.Vec2): cc.Vec2 {\n        const localNodePos = this.field.node.convertToNodeSpaceAR(touchPos);\n\n        return this.getPositionOnMap(localNodePos);\n    }\n\n    public getPositionOnMap(localNodePos: cc.Vec2): cc.Vec2 {\n        const deltaX = localNodePos.x - this.startPoint.x;\n        const deltaY = localNodePos.y - this.startPoint.y;\n\n        const posOnMap = new cc.Vec2(\n            Math.round(deltaX / (this.tileScaledSize.width + this.offset.x)),\n            -Math.round(deltaY / (this.tileScaledSize.height + this.offset.y))\n        )\n\n        const nearPoin = this.getMapToWorldPos(posOnMap);\n        const distanceX = localNodePos.x - nearPoin.x;\n        const distanceY = localNodePos.y - nearPoin.y;\n\n        if (\n            (distanceX <= this.tileScaledSize.width / 2)\n            && (distanceY <= this.tileScaledSize.height / 2)\n        ) {\n            return posOnMap\n        } else return null;\n    }\n\n    public getMapToWorldPos(mapPos: cc.Vec2): cc.Vec2 {\n        const posX = mapPos.x * (this.tileScaledSize.width + this.offset.x);\n        const posY = mapPos.y * (this.tileScaledSize.height + this.offset.y);\n\n        return new cc.Vec2(this.startPoint.x + posX, this.startPoint.y - posY);\n    }\n\n    private conputeFieldParams(): void {\n        this.fieldWorldSize = this.field.node.getContentSize();\n\n        const scaleX = (this.fieldWorldSize.width / (this.fieldSize.width * this.tileSize.width));\n        const scaleY = (this.fieldWorldSize.height / (this.fieldSize.height * this.tileSize.height));\n        const minScale = Math.min(scaleX, scaleY);\n        this._tileScale = minScale;\n\n        this.tileScaledSize = Utilities.multiplySizeByScalar(this.tileSize, minScale);\n\n        const offsetX = (this.fieldWorldSize.width - (this.tileScaledSize.width * this.fieldSize.width)) / (this.fieldSize.width + 1);\n        const offsetY = (this.fieldWorldSize.height - (this.tileScaledSize.height * this.fieldSize.height)) / (this.fieldSize.height + 1);\n        this.offset = new cc.Vec2(offsetX, offsetY);\n\n        const startPointX = -this.fieldWorldSize.width / 2 + offsetX + this.tileScaledSize.width / 2;\n        const startPointY = this.fieldWorldSize.height / 2 - offsetY - this.tileScaledSize.height / 2;\n        this.startPoint = new cc.Vec2(startPointX, startPointY);\n    }\n}\n","import BoosterManager from '../Booster/BoosterManager';\r\nimport IBoosterManager from '../Booster/Interface/IBoosterManager';\r\nimport EasingType from '../Enums/EasingType';\r\nimport Tile from '../Tile/Tile';\r\nimport TileColorDestroy from '../Tile/TileColorDestroy';\r\nimport { AreaDestroy, LineDestroy, TileAbilityTypes } from '../Tile/TileConstants';\r\nimport TilesCreator from '../Tile/TilesCreator';\r\nimport FieldCreator from './FieldCreator';\r\nimport FieldInput from './FieldInput';\r\nimport FieldState from './FieldStates/FieldState';\r\nimport FieldStateCreation from './FieldStates/FieldStateCreation';\r\nimport FieldUtils from './FieldUtils';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass()\r\nexport default class Field extends cc.Component {\r\n    @property(TilesCreator) tilesCreator: TilesCreator = null;\r\n    @property(BoosterManager) boosterManager: IBoosterManager = null;\r\n    @property(cc.Node) renderer: cc.Node = null;\r\n\r\n    @property(cc.Float) fallSpeed: number = 0.3;\r\n    @property({ type: cc.Enum(EasingType) }) easingFall = EasingType.bounceOut;\r\n    @property(cc.Float) fallTimeLimit: number = 0.6;\r\n    @property(cc.Integer) matchingCountForUpgrade: number = 4;\r\n\r\n    public fieldInput: FieldInput;\r\n    public fieldCreator: FieldCreator;\r\n\r\n    public focusTile: Tile = null;\r\n\r\n    private state: FieldState;\r\n\r\n    public init(fieldSize: cc.Size): void {\r\n        new FieldUtils().init(this, fieldSize);\r\n        this.fieldCreator = new FieldCreator(this);\r\n        this.fieldInput = new FieldInput(this);\r\n        this.fieldInput.init();\r\n\r\n        this.setState(new FieldStateCreation(this));\r\n    }\r\n\r\n    public enable(): void {\r\n        this.fieldInput.enable();\r\n    }\r\n\r\n    public disable(): void {\r\n        this.fieldInput.disable();\r\n    }\r\n\r\n    public setState(state: FieldState): void {\r\n        if (state === this.state) return;\r\n\r\n        this.state = state;\r\n\r\n        this.state.enterToState();\r\n    }\r\n\r\n    public tapToTile(tile: Tile): void {\r\n        this.state.tapToTile(tile);\r\n    }\r\n\r\n    public async waitTimer(time: number): Promise<void> {\r\n        return new Promise((res) => this.scheduleOnce(() => res(), time));\r\n    }\r\n\r\n    public getSiblingsByColor(tile: TileColorDestroy): TileColorDestroy[] {\r\n        const siblings = [];\r\n        const needCheck = [tile];\r\n\r\n        while (needCheck.length > 0) {\r\n            const currentTile = needCheck.pop();\r\n            const neighbors = this.fieldCreator.getNeighbors(currentTile);\r\n\r\n            neighbors.forEach((neighbor) => {\r\n                if (\r\n                    neighbor instanceof TileColorDestroy\r\n                    && neighbor.config.typeDestroy === tile.config.typeDestroy\r\n                ) {\r\n                    needCheck.push(neighbor);\r\n                    siblings.push(neighbor);\r\n                    neighbor.needMatch = true;\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        return siblings;\r\n    }\r\n\r\n    public addUpgradedTile(\r\n        posOnMap: cc.Vec2,\r\n        ability: TileAbilityTypes,\r\n        typeDestroy: LineDestroy | AreaDestroy\r\n    ): void {\r\n        this.fieldCreator.addTileOnMap(posOnMap, ability, typeDestroy);\r\n    }\r\n\r\n    public checkToMix(): boolean {\r\n        const allTiles = this.fieldCreator.getAllTiles();\r\n\r\n        for (let i = 0; i < allTiles.length; i++) {\r\n            const tile = allTiles[i];\r\n            const neighbors = this.fieldCreator.getNeighbors(tile);\r\n            const hasSameColor = neighbors.some(n => this.checkSameColor(tile, n) || !(n instanceof TileColorDestroy));\r\n\r\n            if (hasSameColor) return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    private checkSameColor(firstTile: Tile, secondTile: Tile): boolean {\r\n        return (\r\n            firstTile instanceof TileColorDestroy\r\n            && secondTile instanceof TileColorDestroy\r\n            && firstTile.config.typeDestroy === secondTile.config.typeDestroy\r\n        );\r\n    }\r\n}\r\n","import { BoosterTypes } from '../../Booster/BoosterTypes';\r\nimport Tile from '../../Tile/Tile';\r\nimport { TileAbilityTypes } from '../../Tile/TileConstants';\r\nimport FieldState from './FieldState';\r\nimport FieldStateAreaDestroy from './FieldStateAreaDestroy';\r\nimport FieldStateDestroyByColor from './FieldStateDestroyByColor';\r\nimport FieldStateLineDestroy from './FieldStateLineDestroy';\r\nimport FieldStateSwap from './FieldStateSwap';\r\n\r\nexport default class FiledStateWaiting extends FieldState {\r\n    tapToTile(tile: Tile): void {\r\n        this.field.focusTile = tile;\r\n\r\n        if (\r\n            !this.field.boosterManager.activeBoosterPayload\r\n            || this.field.boosterManager.activeBoosterPayload.type === BoosterTypes.None\r\n        ) {\r\n            switch (tile.config.ability) {\r\n                case TileAbilityTypes.AreaDestroy:\r\n                    this.field.setState(new FieldStateAreaDestroy(this.field));\r\n                    break;\r\n                case TileAbilityTypes.LineDestroy:\r\n                    this.field.setState(new FieldStateLineDestroy(this.field));\r\n                    break;\r\n                case TileAbilityTypes.ColorDestroy:\r\n                default:\r\n                    this.field.setState(new FieldStateDestroyByColor(this.field));\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this.field.boosterManager.activeBoosterPayload.type) {\r\n                case BoosterTypes.VerticalLineDestroy:\r\n                case BoosterTypes.HorizontalLineDestroy:\r\n                    this.field.setState(new FieldStateLineDestroy(this.field));\r\n                    break;\r\n                case BoosterTypes.Boomb:\r\n                case BoosterTypes.MegaBoomb:\r\n                    this.field.setState(new FieldStateAreaDestroy(this.field));\r\n                    break;\r\n                case BoosterTypes.Swap:\r\n                    this.field.setState(new FieldStateSwap(this.field));\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    enterToState(): void { }\r\n}\r\n","import Events from './Enums/Events';\nimport SceneNames from './Enums/SceneNames';\nimport { LevelConfig } from './Level/LevelConfig';\nimport InputManager from './Plugins/Input/InputManager';\nimport Settings from \"./Plugins/Settings\";\nimport Utilities from './Plugins/Utilities';\nimport ScoreStorage from './ScoreStorage';\nimport { IResultData } from './UI/ResultMenu/IResultData';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GameManager extends cc.Component {\n\n    @property(LevelConfig) levelsConfig: LevelConfig[] = [];\n\n    private settings: Settings = new Settings();\n    private currentLevel: number = 1;\n\n    onLoad(): void {\n        new ScoreStorage();\n        InputManager.getInstance();\n\n        this.subscribeEvents();\n\n        cc.game.addPersistRootNode(this.node);\n    }\n\n    start(): void {\n        this.windowResized();\n    }\n\n\n    private subscribeEvents(): void {\n        cc.view.setResizeCallback(() => {\n            this.windowResized();\n        });\n\n        cc.systemEvent.on(Events.NEW_GAME.toString(), this.newGame, this);\n        cc.systemEvent.on(Events.RESTART_GAME.toString(), this.restartGame, this);\n        cc.systemEvent.on(Events.COMPLETE_LEVEL.toString(), this.completeLevel, this);\n        cc.systemEvent.on(Events.FAIL_LEVEL.toString(), this.failLevel, this);\n        cc.systemEvent.on(Events.LEAVE_LEVEL.toString(), this.leaveLevel, this);\n        cc.systemEvent.on(Events.NEXT_LEVEL.toString(), this.nextLevel, this);\n        cc.systemEvent.on(Events.MAIN_MENU.toString(), this.mainMenu, this);\n    }\n\n    private windowResized(): void {\n        this.settings.updateSettings();\n        cc.systemEvent.emit(Events.WINDOW_RESIZED.toString(), this.settings);\n    }\n\n    private loadScene(name: SceneNames = SceneNames.MAIN, callback?: () => void): void {\n        cc.director.loadScene(name, () => {\n            if (callback) callback();\n            this.windowResized();\n\n            console.log(`Scene ${name} Loaded...`);\n        });\n    }\n\n\n    private newGame() {\n        this.currentLevel = 1;\n\n        this.loadScene(SceneNames.GAME, () => {\n            cc.systemEvent.emit(Events.START_LEVEL.toString(), this.levelsConfig[this.currentLevel - 1], this.currentLevel);\n        });\n    }\n\n    private restartGame() {\n        this.currentLevel = 1;\n\n        this.loadScene(SceneNames.GAME, () => {\n            cc.systemEvent.emit(Events.START_LEVEL.toString(), this.levelsConfig[this.currentLevel - 1], this.currentLevel);\n        });\n    }\n\n    private completeLevel(data: IResultData) {\n        this.saveResultData(data);\n\n        this.loadScene(SceneNames.RESULT, () => {\n            cc.systemEvent.emit(Events.SHOW_RESULT.toString(), data);\n        });\n    }\n    private failLevel(data: IResultData) {\n        this.saveResultData(data);\n\n        this.loadScene(SceneNames.RESULT, () => {\n            cc.systemEvent.emit(Events.SHOW_RESULT.toString(), data);\n        });\n    }\n    private leaveLevel(data: IResultData) {\n        this.saveResultData(data);\n\n        this.loadScene(SceneNames.RESULT, () => {\n            cc.systemEvent.emit(Events.SHOW_RESULT.toString(), data);\n        });\n    }\n\n    private nextLevel() {\n        const nextLevelConfig = (this.currentLevel >= this.levelsConfig.length) ?\n            Utilities.getRandomElementFromArray(this.levelsConfig)\n            : this.levelsConfig[this.currentLevel];\n        this.currentLevel++;\n\n\n        this.loadScene(SceneNames.GAME, () => {\n            cc.systemEvent.emit(Events.START_LEVEL.toString(), nextLevelConfig, this.currentLevel);\n        });\n    }\n\n    private mainMenu() {\n        this.loadScene(SceneNames.MAIN);\n    }\n\n    private saveResultData(data: IResultData): void {\n        const currentData = ScoreStorage.instance.get();\n\n        if (currentData.score <= data.score) {\n            const newData = {\n                score: data.score,\n                steps: data.steps,\n                level: this.currentLevel\n            }\n            ScoreStorage.instance.save(newData);\n        }\n    }\n}\n","import InputSources from \"./InputSources\";\r\nimport InputTypes from \"./InputTypes\";\r\nimport Events from \"../../Enums/Events\";\r\n\r\n\r\nconst { ccclass, property, menu } = cc._decorator;\r\n\r\n@ccclass\r\n@menu('Input/Catcher')\r\nexport default class InputCather extends cc.Component {\r\n    @property({ type: cc.Enum(InputSources) }) inputSource = InputSources.Default;\r\n\r\n    onEnable(): void {\r\n        this.toggleSubscribe(true);\r\n    };\r\n\r\n    onDisable(): void {\r\n        this.toggleSubscribe(false);\r\n    }\r\n\r\n    private toggleSubscribe(isOn: boolean): void {\r\n        const type: string = isOn ? 'on' : 'off';\r\n\r\n        this.node[type]('touchstart', this.onDown, this);\r\n        this.node[type]('touchmove', this.onMove, this);\r\n        this.node[type]('touchend', this.onUp, this);\r\n        this.node[type]('touchcancel', this.onUp, this);\r\n    }\r\n\r\n    private onDown(eventTouch): void {\r\n        cc.systemEvent.emit(Events.INPUT.toString(), InputTypes.Down, eventTouch, this.inputSource);\r\n    }\r\n\r\n    private onMove(eventTouch): void {\r\n        cc.systemEvent.emit(Events.INPUT.toString(), InputTypes.Move, eventTouch, this.inputSource);\r\n    }\r\n\r\n    private onUp(eventTouch): void {\r\n        cc.systemEvent.emit(Events.INPUT.toString(), InputTypes.Up, eventTouch, this.inputSource);\r\n    }\r\n}","import InputTypes from \"./InputTypes\";\r\nimport InputSources from \"./InputSources\";\r\nimport Events from \"../../Enums/Events\";\r\n\r\n\r\nexport default class InputManager extends cc.EventTarget {\r\n    //#region properties\r\n\r\n    public isLockedMultiTouch: boolean = true;\r\n\r\n    private static instance: InputManager = null;\r\n\r\n    private currentTouchID: any = null;\r\n\r\n    // #endregion\r\n\r\n    private constructor() {\r\n        super();\r\n        this.subscribeEvents();\r\n    }\r\n\r\n    //#region public methods\r\n\r\n    public static getInstance(): InputManager {\r\n        if (this.instance === null) {\r\n            this.instance = new InputManager();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    public on<T extends Function>(key: number | string, callback: T, target?: any, useCapture?: boolean): T {\r\n        return super.on('' + key, callback, target, useCapture);\r\n    }\r\n\r\n    public off<T extends Function>(key: number | string, callback: T, target?: any, useCapture?: boolean): void {\r\n        super.off('' + key, callback, target);\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n    //#region protected methods\r\n\r\n    protected subscribeEvents(): void {\r\n        cc.systemEvent.on(Events.INPUT.toString(), this.onInput, this);\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n    //#region event handlers\r\n\r\n    private onInput(type: InputTypes, eventTouch: cc.Event.EventTouch, touchSource: InputSources): void {\r\n        if (this.isLockedMultiTouch && this.currentTouchID !== null && this.currentTouchID !== eventTouch.getID()) return;\r\n\r\n        if (type === InputTypes.Up) {\r\n            this.currentTouchID = null;\r\n        }\r\n\r\n        if (type === InputTypes.Down) {\r\n            this.currentTouchID = eventTouch.getID();\r\n        }\r\n\r\n        this.emit(InputTypes.None.toString(), { type, eventTouch, touchSource });\r\n        this.emit(type.toString(), { type, eventTouch, touchSource });\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","enum InputSources {\r\n\tDefault = 0,\r\n\r\n\tCommonCatcher,\r\n\tField,\r\n\r\n\tBoosterButton,\r\n\r\n\tNewGameButton,\r\n\tAchievementsButton,\r\n\tMenuOkButton,\r\n\r\n\tPauseButton,\r\n\tResumeButton,\r\n\tExitButton,\r\n\r\n\tResultNextLeveleButton,\r\n\tResultHomeButton,\r\n\tResultOkButton,\r\n}\r\n\r\nexport default InputSources;","enum InputTypes {\r\n\tNone,\r\n\tDown,\r\n\tMove,\r\n\tUp\r\n}\r\n\r\n\r\nexport default InputTypes;\r\n","import { BoosterConfig } from '../Booster/BoosterConfig';\nimport { BoosterTypes } from '../Booster/BoosterTypes';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('LevelBoosterConfig')\nexport class LevelBoosterConfig extends BoosterConfig {\n    @property({ type: cc.SpriteFrame, visible: false, override: true }) icon: cc.SpriteFrame = null;\n    \n    @property({\n        type: cc.Integer,\n        visible() { return this.type === BoosterTypes.Boomb || this.type === BoosterTypes.MegaBoomb; },\n        override: true\n    }) radius: number = 0;\n}\n","import { LevelBoosterConfig } from './LevelBoosterConfig';\nimport { LevelTileConfig } from './LevelTileConfig';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('LevelConfig')\nexport class LevelConfig {\n    @property(cc.Integer) steps: number = 15;\n    @property(cc.Integer) score: number = 800;\n    @property(cc.Integer) scoreStep: number = 25;\n    @property(cc.Size) fieldSize: cc.Size = cc.Size.ZERO;\n\n    @property(LevelBoosterConfig) boosters: LevelBoosterConfig[] = [];\n    @property(LevelTileConfig) tiles: LevelTileConfig[] = [];\n}\n","import BoosterManager from '../Booster/BoosterManager';\nimport IBoosterManager from '../Booster/Interface/IBoosterManager';\nimport Events from '../Enums/Events';\nimport Field from '../Field/Field';\nimport TilesCreator from '../Tile/TilesCreator';\nimport Counter from '../UI/Counter/Counter';\nimport PauseMenu from '../UI/PauseMenu/PauseMenu';\nimport ProgressBar from '../UI/ProgressBar/ProgressBar';\nimport { LevelConfig } from './LevelConfig';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LevelManager extends cc.Component {\n    @property(PauseMenu) pauseMenu: PauseMenu = null;\n    @property(Counter) scoreCounter: Counter = null;\n    @property(Counter) stepsCounter: Counter = null;\n    @property(ProgressBar) progressBar: ProgressBar = null;\n    @property(BoosterManager) boosterManager: IBoosterManager = null;\n    @property(Field) field: Field = null;\n    @property(TilesCreator) tilesCreator: TilesCreator = null;\n\n    @property(LevelConfig) config: LevelConfig = null;\n\n    private levelNumber: number = 0;\n\n    onLoad() {\n        cc.systemEvent.on(Events.START_LEVEL.toString(), this.onStartLevel, this);\n        cc.systemEvent.on(Events.UPDATE_SCORE.toString(), this.onUpdateScore, this);\n        cc.systemEvent.on(Events.STEP_COMPLETED.toString(), this.onStepCompleted, this);\n    }\n\n    public pause(): void {\n        this.field.disable();\n        this.boosterManager.disable();\n    }\n\n    public resume(): void {\n        this.field.enable();\n        this.boosterManager.enable();\n    }\n\n    public leave(): void {\n        this.pause();\n        cc.systemEvent.emit(Events.LEAVE_LEVEL.toString(), {\n            steps: this.stepsCounter.getCurrentValue(),\n            score: this.scoreCounter.getCurrentValue(),\n            isFail: false,\n        });\n    }\n\n    private onStartLevel(config: LevelConfig, levelNumber: number): void {\n        this.levelNumber = levelNumber;\n\n        this.boosterManager.init(config.boosters);\n        this.boosterManager.enable();\n\n        this.tilesCreator.init(this.field.renderer, config.tiles, config.fieldSize.width * config.fieldSize.height);\n        this.field.init(config.fieldSize);\n\n        this.stepsCounter.init({\n            startValue: config.steps,\n            incrementValue: -1,\n            threshold: 0,\n            callback: async () => {\n                this.pause();\n            }\n        });\n\n        this.scoreCounter.init({\n            startValue: 0,\n            incrementValue: config.scoreStep,\n        });\n\n        this.progressBar.init({\n            goal: config.score,\n            callback: async () => {\n                this.pause();\n            }\n        });\n\n        this.pauseMenu.init(this);\n    }\n\n    private onUpdateScore(multiplier: number = 1): void {\n        this.scoreCounter.updateValue(multiplier);\n        this.progressBar.updateProgress(this.scoreCounter.getCurrentValue());\n    }\n    private async onStepCompleted(): Promise<void> {\n        this.stepsCounter.updateValue();\n\n        if (this.progressBar.isGoalComplete) {\n            await this.field.waitTimer(1.5);\n\n            cc.systemEvent.emit(Events.COMPLETE_LEVEL.toString(), {\n                steps: this.stepsCounter.getCurrentValue(),\n                score: this.scoreCounter.getCurrentValue(),\n                isNextLevel: true,\n                level: this.levelNumber,\n            });\n        }\n\n        if (this.stepsCounter.thresholdReached) {\n            await this.field.waitTimer(1);\n\n            cc.systemEvent.emit(Events.FAIL_LEVEL.toString(),\n                {\n                    steps: this.stepsCounter.getCurrentValue(),\n                    score: this.scoreCounter.getCurrentValue(),\n                    isFail: true,\n                });\n        }\n    }\n}\n","import { TileAreaConfig } from '../Tile/TileAreaDestroy';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('LevelTileConfig')\nexport class LevelTileConfig extends TileAreaConfig {\n    @property({ type: cc.SpriteFrame, visible: false, override: true }) spriteFrame: cc.SpriteFrame = null;\n}\n\n","import { IScoreStorageData } from '../../ScoreStorage';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MainMenuRenderer extends cc.Component {\n\n    @property(cc.Node) modalMenu: cc.Node = null;\n    @property(cc.Node) modalAchievements: cc.Node = null;\n    @property(cc.Label) labelLevel: cc.Label = null;\n    @property(cc.Label) labelSteps: cc.Label = null;\n    @property(cc.Label) labelScore: cc.Label = null;\n\n    private duration: number = 0.1;\n\n    public async showMenu(): Promise<void> {\n        await this.playAnimation(this.modalAchievements, 0);\n        await this.playAnimation(this.modalMenu, 255);\n    }\n\n    public async showAchievements(data: IScoreStorageData): Promise<void> {\n        this.labelLevel.string = '' + data.level;\n        this.labelSteps.string = '' + data.steps;\n        this.labelScore.string = '' + data.score;\n\n        await this.playAnimation(this.modalMenu, 0);\n        await this.playAnimation(this.modalAchievements, 255);\n    }\n\n    private async playAnimation(target: cc.Node, opacity: number): Promise<void> {\n        return new Promise(res => {\n            cc.tween<cc.Node>(target).to(this.duration,\n                { opacity },\n            )\n                .call(() => res())\n                .start();\n        })\n    }\n\n}\n","import Events from '../../Enums/Events';\nimport InputManager from '../../Plugins/Input/InputManager';\nimport { InputManagerData } from '../../Plugins/Input/InputManagerData';\nimport InputSources from '../../Plugins/Input/InputSources';\nimport InputTypes from '../../Plugins/Input/InputTypes';\nimport ScoreStorage from '../../ScoreStorage';\nimport MainMenuRenderer from './MainMenuRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MainMenu extends cc.Component {\n    private renderer: MainMenuRenderer = null;\n    private isInputActive: boolean = true;\n\n    onLoad() {\n        this.renderer = this.node.getComponent(MainMenuRenderer);\n\n        InputManager.getInstance().on(InputTypes.Up, this.onUp, this);\n    }\n\n    private async onUp(data: InputManagerData): Promise<void> {\n        if (!this.isInputActive) return;\n        this.isInputActive = false;\n\n        switch (data.touchSource) {\n            case InputSources.AchievementsButton:\n                await this.showAchievements();\n                break;\n            case InputSources.NewGameButton:\n                cc.systemEvent.emit(Events.NEW_GAME.toString());\n                break;\n            case InputSources.MenuOkButton:\n                await this.renderer.showMenu();\n                break;\n        }\n\n        this.isInputActive = true;\n    }\n\n    private async showAchievements(): Promise<void> {\n        this.renderer.showAchievements(ScoreStorage.instance.get());\n    }\n\n}\n","const {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class PauseMenuRenderer extends cc.Component {\n\n    @property(cc.Node) pauseModal: cc.Node = null;\n    private duration: number = 0.1;\n\n    onLoad(){\n        this.pauseModal.active = false;\n        this.pauseModal.opacity = 0;\n    }\n\n    public async showModal(): Promise<void> {\n        this.pauseModal.active = true;\n        this.playAnimation(this.pauseModal, 255);\n    }\n\n    public async hideModal(): Promise<void> {\n        await this.playAnimation(this.pauseModal, 0);\n        this.pauseModal.active = false;\n    }\n\n    private async playAnimation(target: cc.Node, opacity: number): Promise<void> {\n        return new Promise(res => {\n            cc.tween<cc.Node>(target).to(this.duration,\n                { opacity },\n            )\n                .call(() => res())\n                .start();\n        })\n    }\n\n}\n","import LevelManager from '../../Level/LevelManager';\nimport InputManager from '../../Plugins/Input/InputManager';\nimport { InputManagerData } from '../../Plugins/Input/InputManagerData';\nimport InputSources from '../../Plugins/Input/InputSources';\nimport InputTypes from '../../Plugins/Input/InputTypes';\nimport PauseMenuRenderer from './PauseMenuRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PauseMenu extends cc.Component {\n\n    private levelManager: LevelManager = null;\n    private renderer: PauseMenuRenderer = null;\n    private isInputActive: boolean = false;\n\n    onLoad() {\n        this.renderer = this.node.getComponent(PauseMenuRenderer);\n\n        InputManager.getInstance().on(InputTypes.Up, this.onUp, this);\n    }\n\n    public init(levelManager: LevelManager): void {\n        this.levelManager = levelManager;\n        this.isInputActive = true;\n    }\n\n    private async onUp(data: InputManagerData): Promise<void> {\n        if (!this.isInputActive) return;\n        this.isInputActive = false;\n\n        switch (data.touchSource) {\n            case InputSources.PauseButton:\n                this.levelManager.pause();\n                await this.renderer.showModal();\n                break;\n            case InputSources.ResumeButton:\n                await this.renderer.hideModal();\n                this.levelManager.resume();\n                break;\n            case InputSources.ExitButton:\n                this.renderer.hideModal();\n                this.levelManager.leave();\n                break;\n        }\n\n        this.isInputActive = true;\n    }\n}\n","import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport Settings from \"../../../Settings\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nenum PositionType {\r\n    Relative = 0,\r\n    Absolute = 1,\r\n}\r\n\r\nenum LayerType {\r\n    UI = 0,\r\n    World = 1,\r\n}\r\n\r\n\r\n@ccclass('PositionConfiguration')\r\nclass PositionConfiguration implements IConfiguration {\r\n\r\n    // #region fields\r\n\r\n    @property({ type: cc.Enum(PositionType) }) positionType: PositionType = PositionType.Relative;\r\n    @property({ type: cc.Enum(LayerType) }) layer: LayerType = LayerType.UI;\r\n\r\n    @property(cc.Vec2) position: cc.Vec2 = cc.v2(0, 0);\r\n    @property(cc.Vec2) offset: cc.Vec2 = cc.v2(0, 0);\r\n\r\n    private settings: Settings = new Settings();\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region public methods\r\n\r\n    public applyTransform(node: cc.Node, transformReference: cc.Node, isCondsiderReferenceScale: boolean = false) {\r\n        let newPosition = cc.v2();\r\n        let targetPosition = this.position.clone();\r\n        let referenceSize = this.checkTransformReference(transformReference, isCondsiderReferenceScale);\r\n\r\n        if (this.positionType === PositionType.Relative) {\r\n            if (!referenceSize) referenceSize = this.calculateReferenceSize();\r\n\r\n            newPosition = this.calculatePositionByRefSize(targetPosition, referenceSize);\r\n        } else if (this.positionType === PositionType.Absolute) {\r\n            newPosition = targetPosition.clone().mul(this.layer === LayerType.UI ?\r\n                this.settings.SCALE :\r\n                1\r\n            );\r\n        }\r\n\r\n        this.applyOffset(newPosition, this.offset, this.layer);\r\n        this.applyPosition(node, newPosition)\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region private methods\r\n\r\n    private checkTransformReference(transformReference: cc.Node, isCondsiderReferenceScale: boolean) {\r\n        if (!transformReference) return null;\r\n\r\n        return cc.size(\r\n            transformReference.width * (isCondsiderReferenceScale ? transformReference.scaleX : 1),\r\n            transformReference.height * (isCondsiderReferenceScale ? transformReference.scaleY : 1),\r\n        );\r\n    }\r\n\r\n    private calculateReferenceSize(): cc.Size {\r\n        let referenceSize = null\r\n\r\n        if (this.layer === LayerType.UI) {\r\n            referenceSize = cc.size(this.settings.GAME_WIDTH, this.settings.GAME_HEIGHT);\r\n        } else if (this.layer === LayerType.World) {\r\n            referenceSize = cc.size(this.settings.WORLD_HEIGHT, this.settings.WORLD_WIDTH);\r\n        } else {\r\n            referenceSize = cc.size(1, 1);\r\n        }\r\n\r\n        return referenceSize;\r\n    }\r\n\r\n    private applyOffset(targetPosition: cc.Vec2, offset: cc.Vec2, layer: LayerType) {\r\n        return targetPosition.addSelf(offset.mul(layer === LayerType.UI ? this.settings.SCALE : 1));\r\n    }\r\n\r\n    private applyPosition(node: cc.Node, position: cc.Vec2) {\r\n        node.setPosition(position);\r\n    }\r\n\r\n    private calculatePositionByRefSize(relativePositon: cc.Vec2, referenceSize: cc.Size) {\r\n        return cc.v2(referenceSize.width * relativePositon.x, referenceSize.height * relativePositon.y);\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region import/export methods\r\n\r\n    public getData() {\r\n        return {\r\n            positionType: this.positionType,\r\n            layer: this.layer,\r\n            position: this.position.clone(),\r\n            offset: this.offset.clone(),\r\n        };\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.positionType = data.positionType;\r\n        this.layer = data.layer;\r\n        this.position = data.position;\r\n        this.offset = data.offset;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n\r\n\r\n@ccclass('PositionComponent')\r\nexport default class PositionComponent extends SimpleTransformComponent {\r\n\r\n    @property({ type: PositionConfiguration, serializable: true, visible() { return this.isActive } }) configuration: PositionConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node, transformReference);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new PositionConfiguration() : null;\r\n    }\r\n\r\n}\r\n","import EasingType from '../../Enums/EasingType';\nimport Utilities from '../../Plugins/Utilities';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ProgressBarRenderer extends cc.Component {\n\n    @property(cc.Node) fillLine: cc.Node = null;\n    @property({ type: cc.Enum(EasingType) }) easing: EasingType = EasingType.quadOut;\n    @property(cc.Float) speed: number = 0.03;\n\n    private startLinePosX: number = -621.5;\n    private lineWidth: number = 1243;\n\n    private tween: cc.Tween<cc.Node> = null;\n\n    onLoad() {\n        this.lineWidth = this.fillLine.width;\n        this.startLinePosX = -this.lineWidth / 2;\n\n        this.fillLine.x = this.startLinePosX;\n    }\n\n    public setProgress(progress: number): void {\n        if (this.tween) this.tween.stop();\n        const nextPosX = this.startLinePosX + Utilities.clamp(this.lineWidth * progress, 0, this.lineWidth);\n        const duration = (nextPosX - this.fillLine.x) / this.speed;\n\n        const newPos = this.fillLine.position.clone();\n        newPos.x = nextPosX;\n\n        this.tween = cc.tween<cc.Node>(this.fillLine).to(duration,\n            { position: newPos },\n            { easing: cc.easing[EasingType[this.easing]] }\n        ).start();\n    }\n}\n","import Utilities from '../../Plugins/Utilities';\nimport IProgressBarInitData from './IProgressBarInitData';\nimport ProgressBarRenderer from './ProgressBarRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ProgressBar extends cc.Component {\n\n    private renderer: ProgressBarRenderer = null;\n    private goal: number = 100;\n    private currentProgress: number = 0;\n    private callback: () => void = null;\n\n    private _isGoalComplete: boolean = false;\n    public get isGoalComplete(): boolean {\n        return this._isGoalComplete;\n    }\n\n\n    onLoad() {\n        this.renderer = this.node.getComponent(ProgressBarRenderer);\n    }\n\n    public init(data: IProgressBarInitData): void {\n        this.goal = data.goal;\n        this.callback = data.callback;\n        this.currentProgress = 0;\n        this._isGoalComplete = false;\n\n        this.updateProgress(0);\n    }\n\n    public updateProgress(v: number): void {\n        if (this.isGoalComplete) return;\n\n        this.currentProgress = Utilities.clamp(v, 0, this.goal);\n        this.renderer.setProgress(this.currentProgress / this.goal);\n\n        if (this.currentProgress === this.goal) {\n            this.callback();\n            this._isGoalComplete = true;\n        };\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ResultMenuRenderer extends cc.Component {\n\n    @property(cc.Node) levelWin: cc.Node = null;\n    @property(cc.Label) levelNumberLabel: cc.Label = null;\n    @property(cc.Label) stepsLabel: cc.Label = null;\n    @property(cc.Label) scoreWinLabel: cc.Label = null;\n\n\n    @property(cc.Node) levelFail: cc.Node = null;\n    @property(cc.Label) scoreFailLabel: cc.Label = null;\n    @property(cc.Label) titleFailLabel: cc.Label = null;\n\n    onLoad() {\n        this.levelWin.opacity = 0;\n        this.levelWin.active = false;\n        this.levelFail.opacity = 0;\n        this.levelFail.active = false;\n    }\n\n    public showWinModal(steps: number, score: number, level: number): void {\n        this.levelNumberLabel.string =`уровень ${level}`;\n        this.stepsLabel.string = '' + steps;\n        this.scoreWinLabel.string = '' + score;\n\n        this.levelWin.active = true;\n        this.levelWin.opacity = 255;\n    }\n\n    public showFailModal(isFail: boolean, score: number): void {\n        this.titleFailLabel.string = isFail ? 'поражение' : 'результат';\n        this.scoreFailLabel.string = '' + score;\n\n\n        this.levelFail.active = true;\n        this.levelFail.opacity = 255;\n    }\n\n}\n","import Events from '../../Enums/Events';\nimport InputManager from '../../Plugins/Input/InputManager';\nimport { InputManagerData } from '../../Plugins/Input/InputManagerData';\nimport InputSources from '../../Plugins/Input/InputSources';\nimport InputTypes from '../../Plugins/Input/InputTypes';\nimport { IResultData } from './IResultData';\nimport ResultMenuRenderer from './ResultMenuRenderer';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ResultMenu extends cc.Component {\n    private renderer: ResultMenuRenderer = null;\n    private isInputActive: boolean = true;\n\n    onLoad() {\n        this.renderer = this.node.getComponent(ResultMenuRenderer);\n\n        cc.systemEvent.on(Events.SHOW_RESULT.toString(), this.onShowResult, this);\n        InputManager.getInstance().on(InputTypes.Up, this.onUp, this);\n        console.log(InputManager.getInstance(),'INPUT', this);\n        \n    }\n\n    private onShowResult(data: IResultData): void {\n        if (data.isNextLevel) {\n            this.renderer.showWinModal(data.steps, data.score, data.level);\n        } else {\n            this.renderer.showFailModal(data.isFail, data.score);\n        }\n    }\n\n    private async onUp(data: InputManagerData): Promise<void> {\n        console.log('ResultMenu',data.touchSource);\n        \n        if (!this.isInputActive) return;\n        this.isInputActive = false;\n\n\n        switch (data.touchSource) {\n            case InputSources.ResultHomeButton:\n                cc.systemEvent.emit(Events.MAIN_MENU.toString());\n                break;\n            case InputSources.ResultNextLeveleButton:\n                cc.systemEvent.emit(Events.NEXT_LEVEL.toString());\n                break;\n            case InputSources.ResultOkButton:\n                cc.systemEvent.emit(Events.MAIN_MENU.toString());\n                break;\n        }\n\n        this.isInputActive = true;\n    }\n}\n","import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('RotationConfiguration')\r\nclass RotationConfiguration implements IConfiguration {\r\n    @property() rotation: number = 0;\r\n\r\n    public applyTransform(node: cc.Node, transformReference: cc.Node) {\r\n        node.angle = this.rotation;\r\n    }\r\n\r\n    public getData() {\r\n        return { rotation: this.rotation };\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.rotation = data.rotation;\r\n    }\r\n}\r\n\r\n@ccclass('RotationComponent')\r\nexport default class RotationComponent extends SimpleTransformComponent {\r\n\r\n    @property({ type: RotationConfiguration, serializable: true, visible() { return this.isActive } }) configuration: RotationConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node, transformReference);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new RotationConfiguration() : null;\r\n    }\r\n\r\n}\r\n","import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport Settings from \"../../../Settings\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n\r\nenum ProportionType {\r\n    Proportional = 0,\r\n    Unproportional = 1,\r\n}\r\n\r\nenum FitMode {\r\n    Inscribe = 0,\r\n    Describe = 1,\r\n    FitWidth = 3,\r\n    FitHeight = 4,\r\n    Unproportional = 5,\r\n    Default = 6,\r\n}\r\n\r\nenum SizeMode {\r\n    Relative = 0,\r\n    Constant = 1,\r\n}\r\n\r\nenum LayerType {\r\n    UI = 0,\r\n    World = 1,\r\n}\r\n\r\n\r\n@ccclass('ScaleConfiguration')\r\nclass ScaleConfiguration implements IConfiguration {\r\n\r\n    // #region fields\r\n\r\n    @property({ type: cc.Enum(SizeMode) }) sizeMode: SizeMode = SizeMode.Relative;\r\n    @property({ type: cc.Enum(FitMode) }) fitMode: FitMode = FitMode.Inscribe;\r\n    @property({ type: cc.Enum(LayerType) }) layer: LayerType = LayerType.UI;\r\n    @property(cc.Vec2) desiredSize: cc.Vec2 = cc.v2();\r\n\r\n    @property({ visible() { return this.sizeMode === SizeMode.Relative } }) padding: cc.Vec2 = cc.v2();\r\n\r\n    private settings: Settings = new Settings();\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region public methods\r\n\r\n    public applyTransform(node: cc.Node, transformReference: cc.Node, isCondsiderReferenceScale: boolean = false) {\r\n        let referenceSize: cc.Vec2 = this.checkTransformReference(transformReference, isCondsiderReferenceScale);\r\n        if (!referenceSize) referenceSize = this.calculateReferenceSize();\r\n\r\n        let newScale = cc.v2();\r\n        let actualDesiredSize = this.calculateActualSize(referenceSize);\r\n        let targetScale = cc.v2(\r\n            actualDesiredSize.x / node.width,\r\n            actualDesiredSize.y / node.height,\r\n        );\r\n\r\n        newScale = this.calculateTargetScale(this.fitMode, targetScale, cc.v2(node.scaleX, node.scaleY), actualDesiredSize);\r\n\r\n        node.scaleX = newScale.x;\r\n        node.scaleY = newScale.y\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region private methods\r\n\r\n    private checkTransformReference(transformReference: cc.Node, isCondsiderReferenceScale: boolean): cc.Vec2 {\r\n        if (!transformReference) return null;\r\n\r\n        return cc.v2(\r\n            transformReference.width * (isCondsiderReferenceScale ? transformReference.scaleX : 1),\r\n            transformReference.height * (isCondsiderReferenceScale ? transformReference.scaleY : 1),\r\n        );\r\n    }\r\n\r\n    private calculateReferenceSize(): cc.Vec2 {\r\n        let referenceSize = null\r\n\r\n        if (this.layer === LayerType.UI) {\r\n            referenceSize = cc.v2(this.settings.GAME_WIDTH, this.settings.GAME_HEIGHT);\r\n        } else if (this.layer === LayerType.World) {\r\n            referenceSize = cc.v2(this.settings.WORLD_HEIGHT, this.settings.WORLD_WIDTH);\r\n        } else {\r\n            referenceSize = cc.v2(1, 1);\r\n        }\r\n        return referenceSize;\r\n    }\r\n\r\n    private calculateTargetScale(fitMode: FitMode, necessaryScale: cc.Vec2, currentNodeScale: cc.Vec2, desiredSize: cc.Vec2): cc.Vec2 {\r\n        let ts = necessaryScale.clone();\r\n\r\n        switch (true) {\r\n            case (fitMode === FitMode.Inscribe): {\r\n                ts.x = ts.y = Math.min(ts.x, ts.y);\r\n            } break;\r\n\r\n            case (fitMode === FitMode.Describe): {\r\n                ts.x = ts.y = Math.max(ts.x, ts.y);\r\n            } break;\r\n\r\n            case (fitMode === FitMode.FitHeight): {\r\n                ts.x = ts.y;\r\n            } break;\r\n\r\n            case (fitMode === FitMode.FitWidth): {\r\n                ts.y = ts.x;\r\n            } break;\r\n\r\n            case (fitMode === FitMode.Unproportional): {\r\n                if (this.sizeMode === SizeMode.Constant) {\r\n                    ts = desiredSize.clone();\r\n                }\r\n            } break;\r\n\r\n            case (fitMode === FitMode.Default): {\r\n                ts = this.calculateTargetScale(FitMode.Inscribe, necessaryScale, currentNodeScale, desiredSize);\r\n            } break;\r\n        }\r\n\r\n        return ts;\r\n    }\r\n\r\n    private calculateActualSize(referenceSize: cc.Vec2): cc.Vec2 {\r\n        let desiredSize = null;\r\n\r\n        switch (true) {\r\n            case (this.sizeMode === SizeMode.Relative && this.layer === LayerType.UI): {\r\n                desiredSize = this.calculateSizeByRelativeSize(this.desiredSize, referenceSize).sub(this.padding.mul(this.settings.SCALE));\r\n            } break;\r\n\r\n            case (this.sizeMode === SizeMode.Relative && this.layer === LayerType.World): {\r\n                desiredSize = this.calculateSizeByRelativeSize(this.desiredSize, referenceSize);\r\n            } break;\r\n\r\n            case (this.sizeMode === SizeMode.Constant && this.layer === LayerType.UI): {\r\n                desiredSize = this.desiredSize.clone().mul(this.settings.SCALE);\r\n            } break;\r\n\r\n            case (this.sizeMode === SizeMode.Constant && this.layer === LayerType.World): {\r\n                desiredSize = this.desiredSize.clone();\r\n            } break;\r\n\r\n            default: {\r\n                desiredSize = cc.v2(1, 1);\r\n            } break;\r\n        }\r\n\r\n        return desiredSize;\r\n    }\r\n\r\n    private calculateSizeByRelativeSize(relativeSize: cc.Vec2, referenceSize: cc.Vec2): cc.Vec2 {\r\n        return cc.v2(\r\n            referenceSize.x * relativeSize.x,\r\n            referenceSize.y * relativeSize.y,\r\n        );\r\n    }\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region import/export methods\r\n\r\n    public getData() {\r\n        return {\r\n            sizeMode: this.sizeMode,\r\n            fitMode: this.fitMode,\r\n            layer: this.layer,\r\n            desiredSize: this.desiredSize,\r\n            padding: this.padding,\r\n        }\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.sizeMode = data.sizeMode;\r\n        this.fitMode = data.fitMode;\r\n        this.layer = data.layer;\r\n        this.desiredSize = data.desiredSize.clone();\r\n        this.padding = data.padding.clone();\r\n    }\r\n\r\n    // #endregion\r\n\r\n}\r\n\r\n@ccclass('ScaleComponent')\r\nexport default class ScaleComponent extends SimpleTransformComponent {\r\n\r\n\r\n    @property({ type: ScaleConfiguration, serializable: true, visible() { return this.isActive } }) configuration: ScaleConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node, transformReference);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new ScaleConfiguration() : null;\r\n    }\r\n\r\n}\r\n","enum SceneNames {\n    MAIN =  'Main',\n    GAME =  'Game',\n    RESULT =  'Result',\n}\n\nexport default SceneNames;","export interface IScoreStorageData {\n    steps: number,\n    level: number,\n    score: number,\n\n}\n\nexport default class ScoreStorage {\n    private static _instance: ScoreStorage = null;\n    public static get instance(): ScoreStorage {\n        return this._instance;\n    }\n    private readonly storageName: string = 'blastGame';\n\n    constructor() {\n        if (ScoreStorage.instance !== null) {\n            return ScoreStorage.instance;\n        }\n\n        ScoreStorage._instance = this;\n        \n        if (!this.get()) this.save({ steps: 0, level: 0, score: 0 });\n    }\n\n    public save(data: IScoreStorageData): void {\n        localStorage.setItem(this.storageName, JSON.stringify(data));\n    }\n\n    public get(): IScoreStorageData {\n        const data = localStorage.getItem(this.storageName);\n\n        return JSON.parse(data);\n    }\n}\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('Settings')\r\nexport default class Settings {\r\n    private static instance: Settings = undefined;\r\n\r\n    private default_width: number = 0;\r\n    private default_height: number = 0;\r\n    private game_width: number = 0;\r\n    private game_height: number = 0;\r\n    private scale: number = 0;\r\n    private is_landscape: boolean = false;\r\n    private half_width: number = 0;\r\n    private half_heigth: number = 0;\r\n    private world_width: number = 0;\r\n    private world_height: number = 0;\r\n\r\n    public get DEFAULT_WIDTH(): number { return this.default_width; }\r\n    public get DEFAULT_HEIGHT(): number { return this.default_height; }\r\n    public get GAME_WIDTH(): number { return this.game_width; }\r\n    public get GAME_HEIGHT(): number { return this.game_height; }\r\n    public get IS_LANDSCAPE(): boolean { return this.is_landscape; }\r\n    public get HALF_WIDTH(): number { return this.half_width; }\r\n    public get HALF_HEIGHT(): number { return this.half_heigth; }\r\n    public get WORLD_WIDTH(): number { return this.world_width; }\r\n    public get WORLD_HEIGHT(): number { return this.world_height; }\r\n    public get SCALE(): number { return this.scale; }\r\n    public get WIN_SIZE(): cc.Vec2 { return cc.v2(this.GAME_WIDTH, this.GAME_HEIGHT); }\r\n    public get INV_WIN_SIZE(): cc.Vec2 { return cc.v2(1 / this.GAME_WIDTH, 1 / this.GAME_HEIGHT); }\r\n    public get SIDE_RATIO(): number { return Math.max(this.GAME_WIDTH, this.GAME_HEIGHT) / Math.min(this.GAME_WIDTH, this.GAME_HEIGHT); }\r\n\r\n    public set WORLD_WIDTH(value) { this.world_width = value; }\r\n    public set WORLD_HEIGHT(value) { this.world_height = value; }\r\n\r\n    constructor() {\r\n        const instance = Settings.instance;\r\n        if (instance !== undefined) {\r\n            return instance;\r\n        }\r\n\r\n        Settings.instance = this;\r\n\r\n        this.default_width = 640;\r\n        this.default_height = 1136;\r\n        this.game_width = 640;\r\n        this.game_height = 1136;\r\n        this.scale = 1;\r\n        this.is_landscape = false;\r\n        this.half_width = 320;\r\n        this.half_heigth = 568;\r\n        this.world_width = 1366;\r\n        this.world_height = 1366;\r\n    }\r\n\r\n    updateSettings() {\r\n        this.game_width = cc.winSize.width;\r\n        this.game_height = cc.winSize.height;\r\n\r\n        this.half_width = this.GAME_WIDTH * .5;\r\n        this.half_heigth = this.GAME_HEIGHT * .5;\r\n\r\n        this.is_landscape = this.GAME_WIDTH > this.GAME_HEIGHT;\r\n        this.scale = this.calculateScale();\r\n    }\r\n\r\n    chooseDefaultHeight() {\r\n        const height = this.IS_LANDSCAPE ? this.DEFAULT_HEIGHT : this.DEFAULT_WIDTH;\r\n        return height;\r\n    }\r\n\r\n    chooseDefaultWidth() {\r\n        const width = this.IS_LANDSCAPE ? this.DEFAULT_WIDTH : this.DEFAULT_HEIGHT;\r\n        return width;\r\n    }\r\n\r\n    calculateScale() {\r\n        const widthRatio = this.GAME_WIDTH / this.chooseDefaultWidth();\r\n        const heightRatio = this.GAME_HEIGHT / this.chooseDefaultHeight();\r\n        const minRatio = Math.min(widthRatio, heightRatio);\r\n        return minRatio;\r\n    }\r\n}\r\n","import IConfiguration from \"./IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\ntype ConfigurationData = {\r\n    isActive: boolean,\r\n    config: any,\r\n}\r\n\r\n@ccclass('SimpleTransformComponent')\r\nexport default abstract class SimpleTransformComponent {\r\n    @property({ visible: false }) private _isActive: boolean = false;\r\n    @property()\r\n    protected set isActive(v: boolean) { this._isActive = v; this.reset(v); };\r\n    protected get isActive(): boolean { return this._isActive; };\r\n\r\n    protected configuration: IConfiguration = null;\r\n\r\n    public disable() { this.isActive = false; }\r\n    public enable() { this.isActive = true; }\r\n\r\n\r\n    public abstract execute(node: cc.Node, transformReference: cc.Node);\r\n    protected abstract reset(isActive: boolean);\r\n\r\n\r\n\r\n\r\n    public getData(): ConfigurationData {\r\n        const configurationData = this.configuration ? this.configuration.getData() : null;\r\n\r\n        return {\r\n            isActive: this.isActive,\r\n            config: configurationData,\r\n        };\r\n    }\r\n\r\n    public applyData(data: ConfigurationData) {\r\n        if (!data) return;\r\n\r\n        this.isActive = data.isActive;\r\n        if (data.config && this.configuration) this.configuration.applyData(data.config);\r\n    }\r\n\r\n}","import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('SizeConfiguration')\r\nclass SizeConfiguration implements IConfiguration {\r\n    @property(cc.Size) size: cc.Size = cc.size(1, 1);\r\n\r\n    public applyTransform(node: cc.Node) {\r\n        // node.angle = this.rotation;\r\n        node.width = this.size.width;\r\n        node.height = this.size.height;\r\n    }\r\n\r\n    public getData() {\r\n        return { size: this.size.clone() };\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.size = data.size;\r\n    }\r\n}\r\n\r\n\r\n@ccclass('SizeComponent')\r\nexport default class SizeComponent extends SimpleTransformComponent {\r\n\r\n    @property({ type: SizeConfiguration, serializable: true, visible() { return this.isActive } }) configuration: SizeConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new SizeConfiguration() : null;\r\n    }\r\n\r\n}\r\n","import Tile, { TileConfig } from './Tile';\nimport { AreaDestroy } from './TileConstants';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('TileAreaConfig')\nexport class TileAreaConfig extends TileConfig {\n    @property({ type: cc.Enum(AreaDestroy) }) typeDestroy: AreaDestroy = AreaDestroy.Default;\n    @property(cc.Integer) radius: number = 5;\n}\n\n@ccclass\nexport default class TileAreaDestroy extends Tile {\n    @property({ type: TileAreaConfig, override: true }) config: TileAreaConfig = null;\n\n    public init<T extends TileAreaConfig>(initData: T): void {\n        this.config.spriteFrame = initData.spriteFrame;\n        this.tileRenderer.setSpriteFrame(initData.spriteFrame);\n        this.config.typeDestroy = initData.typeDestroy;\n        this.config.radius = initData.radius;\n    }\n}","import Tile, { TileConfig } from './Tile';\nimport { ColorDestroy } from './TileConstants';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('TileColorConfig')\nexport class TileColorConfig extends TileConfig {\n    @property({ type: cc.Enum(ColorDestroy) }) typeDestroy: ColorDestroy = ColorDestroy.Red;\n    @property({ type: cc.Integer }) matchCount: number = 2;\n}\n\n@ccclass\nexport default class TileColorDestroy extends Tile {\n    @property({ type: TileColorConfig, override: true }) config: TileColorConfig = null;\n\n    public init<T extends TileColorConfig>(initData: T): void {\n        this.config.spriteFrame = initData.spriteFrame;\n        this.tileRenderer.setSpriteFrame(initData.spriteFrame);\n        this.config.typeDestroy = initData.typeDestroy;\n        this.config.matchCount = initData.matchCount;\n    }\n}\n","export enum ColorDestroy {\n    Red,\n    Green,\n    Blue,\n    Purple,\n    Yellow,\n}\nexport enum LineDestroy {\n    Vertical,\n    Horizontal,\n}\nexport enum AreaDestroy {\n    Default,\n    All,\n}\n\nexport enum TileAbilityTypes {\n    ColorDestroy,\n    LineDestroy,\n    AreaDestroy,\n}\n\n\n","import Tile, { TileConfig } from './Tile';\nimport { LineDestroy } from './TileConstants';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass('TileLineConfig')\nexport class TileLineConfig extends TileConfig {\n    @property({ type: cc.Enum(LineDestroy) }) typeDestroy: LineDestroy = LineDestroy.Vertical;\n}\n\n@ccclass\nexport default class TileLineDestroy extends Tile {\n    @property({ type: TileLineConfig, override: true }) config: TileLineConfig = null;\n\n    public init<T extends TileLineConfig>(initData: T): void {\n        this.config.spriteFrame = initData.spriteFrame;\n        this.tileRenderer.setSpriteFrame(initData.spriteFrame);\n        this.config.typeDestroy = initData.typeDestroy;\n    }\n}\n","import EasingType from '../Enums/EasingType';\nimport Utilities from '../Plugins/Utilities';\n\nconst { ccclass, property } = cc._decorator;\n\nenum AnimationNames {\n    Show = 'tile_show',\n    Hide = 'tile_hide',\n    Focus = 'tile_focus',\n    CantMatching = 'tile_cant_matching',\n    Swap = 'tile_swap',\n}\n\nenum AnimationEvents {\n    Swap = 'tile_swap_mid',\n}\n\n@ccclass()\nexport default class TileRenderer extends cc.Component {\n    @property(cc.Sprite) renderer: cc.Sprite = null;\n\n    private animation: cc.Animation = null;\n    private moveTween: cc.Tween = null;\n\n    private swapPos: cc.Vec2 = cc.Vec2.ZERO;\n\n    onLoad() {\n        this.animation = this.node.getComponent(cc.Animation);\n    }\n\n    public reset(): void {\n        this.renderer.node.scale = 0.001;\n    }\n\n    public setScale(scale: number): void {\n        this.node.scale = scale;\n    }\n\n    public setSpriteFrame(spriteFrame: cc.SpriteFrame): void {\n        this.renderer.spriteFrame = spriteFrame;\n    }\n\n    public show(useAnim: boolean = true): void {\n        if (useAnim) {\n            this.animation.play(AnimationNames.Show)\n        } else {\n            this.renderer.node.scale = 1;\n        };\n    }\n\n    public async hide(): Promise<void> {\n        await this.playAnimation(AnimationNames.Hide);\n    }\n\n    public async playFocusAnim(): Promise<void> {\n        await this.playAnimation(AnimationNames.Focus);\n    }\n\n    public async playSwapAnim(pos: cc.Vec2): Promise<void> {\n        this.swapPos = pos.clone();\n\n        await this.playAnimation(AnimationNames.Swap);\n    }\n\n    public async playCantMatching(): Promise<void> {\n        await this.playAnimation(AnimationNames.CantMatching);\n    }\n\n    public setPosition(pos: cc.Vec2): void {\n        this.node.setPosition(pos);\n    }\n\n    public getPosition(): cc.Vec2 {\n        return new cc.Vec2(this.node.x, this.node.y);\n    }\n\n    public moveTo(pos: cc.Vec2, duration: number, easing: EasingType = EasingType.linear): void {\n        if (this.moveTween) this.moveTween.stop();\n\n        this.moveTween = new cc.Tween<cc.Node>(this.node)\n            .to(duration,\n                { position: Utilities.convertToVec3(pos) },\n                { easing: cc.easing[EasingType[easing]] }\n            ).start();\n    }\n\n    private async playAnimation(name: AnimationNames): Promise<void> {\n        return new Promise((res) => {\n            this.animation.play(name);\n            this.animation.once(cc.Animation.EventType.FINISHED, () => res());\n        });\n    }\n\n    private animationEventHandler(e: AnimationEvents): void {\n        switch (e) {\n            case AnimationEvents.Swap:\n            default:\n                if (this.swapPos) this.setPosition(this.swapPos);\n\n                break;\n        }\n    }\n}","import Events from '../Enums/Events';\nimport { LevelTileConfig } from '../Level/LevelTileConfig';\nimport Utilities from '../Plugins/Utilities';\nimport Tile from './Tile';\nimport TileAreaDestroy, { TileAreaConfig } from './TileAreaDestroy';\nimport TileColorDestroy, { TileColorConfig } from './TileColorDestroy';\nimport { AreaDestroy, ColorDestroy, LineDestroy, TileAbilityTypes } from './TileConstants';\nimport TileLineDestroy, { TileLineConfig } from './TileLineDestroy';\nimport TilesPool from './TilesPool';\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TilesCreator extends cc.Component {\n    @property(cc.Prefab) tileColorPrefab: cc.Prefab = null;\n    @property(cc.Prefab) tileLinePrefab: cc.Prefab = null;\n    @property(cc.Prefab) tileAreaPrefab: cc.Prefab = null;\n\n    @property(TileColorConfig) tileColorConig: TileColorConfig[] = [];\n    @property(TileLineConfig) tileLineConig: TileLineConfig[] = [];\n    @property(TileAreaConfig) tileAreaConig: TileAreaConfig[] = [];\n\n    private tileColorPool: TilesPool<TileColorDestroy>;\n    private tileLinePool: TilesPool<TileLineDestroy>;\n    private tileAreaPool: TilesPool<TileAreaDestroy>;\n\n    public init(parentNode: cc.Node, tilesConig: LevelTileConfig[], colorTilesCount: number): void {\n        this.tileAreaConig.forEach(tac => {\n            tac.radius = tilesConig.find(c => c.typeDestroy === tac.typeDestroy).radius\n        });\n\n        this.tileColorPool = new TilesPool(parentNode, this.tileColorPrefab, 'TileColorDestroy', colorTilesCount);\n        this.tileLinePool = new TilesPool(parentNode, this.tileLinePrefab, 'TileLineDestroy');\n        this.tileAreaPool = new TilesPool(parentNode, this.tileAreaPrefab, 'TileAreaDestroy');\n\n        cc.systemEvent.on(Events.TILE_REMOVED.toString(), this.tileRemove, this);\n    }\n\n    public getTileColorDestroy(\n        isRandom: boolean,\n        type: ColorDestroy = ColorDestroy.Blue\n    ): TileColorDestroy {\n        const tile = this.tileColorPool.getTile();\n        type = isRandom ? ColorDestroy[Utilities.getRandomEnumKey(ColorDestroy)] : type;\n        const config = this.tileColorConig.find(t => t.typeDestroy === type);\n\n        tile.init(config);\n\n        return tile;\n    }\n\n    public getTileLineDestroy(\n        isRandom: boolean,\n        type: LineDestroy = LineDestroy.Horizontal\n    ): TileLineDestroy {\n        const tile = this.tileLinePool.getTile();\n        type = isRandom ? LineDestroy[Utilities.getRandomEnumKey(LineDestroy)] : type;\n        const config = this.tileLineConig.find(t => t.typeDestroy === type);\n\n        tile.init(config);\n\n        return tile;\n    }\n\n    public getTileAreaDestroy(\n        isRandom: boolean,\n        type: AreaDestroy = AreaDestroy.Default\n    ): TileAreaDestroy {\n\n        const tile = this.tileAreaPool.getTile();\n        type = isRandom ? AreaDestroy[Utilities.getRandomEnumKey(AreaDestroy)] : type;\n        const config = this.tileAreaConig.find(t => t.typeDestroy === type);\n\n        tile.init(config);\n\n        return tile;\n    }\n\n    private tileRemove<T extends Tile>(tile: T): void {\n        if (tile instanceof TileColorDestroy) {\n            this.tileColorPool.addTile(tile);\n        } else if (tile instanceof TileLineDestroy) {\n            this.tileLinePool.addTile(tile);\n        } else if (tile instanceof TileAreaDestroy) {\n            this.tileAreaPool.addTile(tile);\n        }\n    }\n}\n","import FieldUtils from '../Field/FieldUtils';\r\nimport Tile from './Tile';\r\n\r\nexport default class TilesPool<T extends Tile> {\r\n    public defaulSize: number;\r\n\r\n    private pool: T[] = [];\r\n\r\n    private defaultPos: cc.Vec2;\r\n    private componentName: string;\r\n    private parentNode: cc.Node;\r\n    private prefab: cc.Prefab;\r\n\r\n    constructor(\r\n        parentNode: cc.Node,\r\n        prefab: cc.Prefab,\r\n        componentName: string,\r\n        defaulSize: number = 10,\r\n        defaultPos: cc.Vec2 = new cc.Vec2(-5555, -5555),\r\n    ) {\r\n        this.parentNode = parentNode;\r\n        this.prefab = prefab;\r\n        this.componentName = componentName;\r\n        this.defaulSize = defaulSize;\r\n        this.defaultPos = defaultPos;\r\n\r\n        const initElemnts = [];\r\n\r\n        for (let i = 0; i < this.defaulSize; i++) {\r\n            initElemnts.push(this.getTile());\r\n        }\r\n        \r\n        initElemnts.forEach(el => this.addTile(el))\r\n    }\r\n\r\n    public getTile(): T {\r\n        let tile: T;\r\n\r\n        if (this.pool.length > 0) {\r\n            tile = this.pool.pop();\r\n            tile.reset();\r\n        } else {\r\n            const tileNode = cc.instantiate(this.prefab);\r\n            tileNode.setParent(this.parentNode);\r\n\r\n            tile = tileNode.getComponent(this.componentName);\r\n            tile.setPosition(this.defaultPos);\r\n        }\r\n\r\n        if (FieldUtils.instance) tile.setScale(FieldUtils.instance.tileScale);\r\n\r\n        return tile;\r\n    }\r\n\r\n    public addTile(tile: T): void {\r\n        tile.setPosition(this.defaultPos);\r\n\r\n        this.pool.push(tile);\r\n    }\r\n\r\n}\r\n","import EasingType from '../Enums/EasingType';\r\nimport Events from '../Enums/Events';\r\nimport { TileAreaConfig } from './TileAreaDestroy';\r\nimport { TileColorConfig } from './TileColorDestroy';\r\nimport { TileAbilityTypes } from './TileConstants';\r\nimport { TileLineConfig } from './TileLineDestroy';\r\nimport TileRenderer from './TileRenderer';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('TileConfig')\r\nexport class TileConfig {\r\n    @property({ type: cc.Enum(TileAbilityTypes) }) ability: TileAbilityTypes = TileAbilityTypes.ColorDestroy;\r\n    @property({ type: cc.SpriteFrame }) spriteFrame: cc.SpriteFrame = null;\r\n}\r\n\r\n@ccclass()\r\nexport default abstract class Tile extends cc.Component {\r\n    @property() config: TileColorConfig | TileLineConfig | TileAreaConfig = null;\r\n\r\n    public needMatch: boolean = false;\r\n\r\n    protected tileRenderer: TileRenderer = null;\r\n\r\n    onLoad() {\r\n        this.tileRenderer = this.node.getComponent(TileRenderer);\r\n        this.reset();\r\n    }\r\n\r\n    public abstract init(initData): void;\r\n\r\n    public setScale(scale: number) {\r\n        this.tileRenderer.setScale(scale);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.needMatch = false;\r\n        this.tileRenderer.reset();\r\n    }\r\n\r\n    public setPosition(pos: cc.Vec2): void {\r\n        this.tileRenderer.setPosition(pos);\r\n    }\r\n\r\n    public getPosition(): cc.Vec2 {\r\n        return this.tileRenderer.getPosition();\r\n    }\r\n\r\n    public fallDown(pos: cc.Vec2, duration: number, easing: EasingType): void {\r\n        this.tileRenderer.moveTo(pos, duration, easing);\r\n    }\r\n\r\n    public async remove(): Promise<void> {\r\n        await this.tileRenderer.hide();\r\n        cc.systemEvent.emit(Events.TILE_REMOVED.toString(), this);\r\n    }\r\n\r\n    public show(useAnim: boolean = true): void {\r\n        this.tileRenderer.show(useAnim);\r\n    }\r\n\r\n    public async focus(): Promise<void>{\r\n        await this.tileRenderer.playFocusAnim();\r\n    }\r\n\r\n    public async cantMatching(): Promise<void>{\r\n        await this.tileRenderer.playCantMatching();\r\n    }\r\n\r\n    public async swap(pos: cc.Vec2): Promise<void>{\r\n        await this.tileRenderer.playSwapAnim(pos);\r\n    }\r\n}\r\n","import Settings from \"../Settings\";\r\nimport Events from \"../../Enums/Events\";\r\nimport TransformController from \"./Accessories/TransformController\";\r\n\r\nconst { ccclass, property, menu } = cc._decorator;\r\n\r\n@ccclass\r\n@menu('Transform/TransformComponent')\r\nexport default class TransformComponent extends cc.Component {\r\n    @property(cc.Node) transformReference: cc.Node = null;\r\n\r\n    @property _isSameTransform: boolean = true;\r\n    @property\r\n    set isSameTransform(v: boolean) {\r\n        this._isSameTransform = v;\r\n\r\n        if (this._isSameTransform) {\r\n            this.commonTransform = this.landscapeTransform.clone();\r\n\r\n            this.landscapeTransform = null;\r\n            this.portraitTransform = null;\r\n        } else {\r\n            this.landscapeTransform = this.commonTransform.clone();\r\n            this.portraitTransform = this.commonTransform.clone();\r\n\r\n            this.commonTransform = null;\r\n        }\r\n    };\r\n    get isSameTransform(): boolean { return this._isSameTransform };\r\n\r\n\r\n    @property _isDependingOnSideRatio: boolean = false;\r\n    @property\r\n    set isDependingOnSideRatio(v: boolean) {\r\n        this._isDependingOnSideRatio = v;\r\n\r\n        if (this.isDependingOnSideRatio) {\r\n            if (this.isSameTransform) {\r\n                this.commonTransformBelowSideRatio = this.commonTransform.clone();\r\n            } else {\r\n                this.portraitTransformBelowSideRatio = this.portraitTransform.clone();\r\n                this.landscapeTransformBelowSideRatio = this.landscapeTransform.clone();\r\n            }\r\n        } else {\r\n            this.commonTransformBelowSideRatio = null;\r\n            this.portraitTransformBelowSideRatio = null;\r\n            this.landscapeTransformBelowSideRatio = null;\r\n        }\r\n    }\r\n\r\n    get isDependingOnSideRatio(): boolean {\r\n        return this._isDependingOnSideRatio;\r\n    }\r\n\r\n    @property({ visible() { return this.isDependingOnSideRatio; } }) limitSideRatio: number = 1.35;\r\n\r\n\r\n    @property({ type: TransformController, visible() { return this.isSameTransform; } }) commonTransform: TransformController = new TransformController();\r\n    @property({ type: TransformController, visible() { return this.isSameTransform && this.isDependingOnSideRatio; } }) commonTransformBelowSideRatio: TransformController = new TransformController();\r\n\r\n    @property({ type: TransformController, visible() { return !this.isSameTransform; } }) landscapeTransform: TransformController = new TransformController();\r\n    @property({ type: TransformController, visible() { return !this.isSameTransform && this.isDependingOnSideRatio; } }) landscapeTransformBelowSideRatio: TransformController = new TransformController();\r\n\r\n    @property({ type: TransformController, visible() { return !this.isSameTransform; } }) portraitTransform: TransformController = new TransformController();\r\n    @property({ type: TransformController, visible() { return !this.isSameTransform && this.isDependingOnSideRatio; } }) portraitTransformBelowSideRatio: TransformController = new TransformController();\r\n\r\n\r\n    private settings: Settings = new Settings();\r\n\r\n    onLoad() {\r\n        this.subscribeEvents();\r\n\r\n        if (this.commonTransform) this.commonTransform.transformReference = this.transformReference;\r\n        if (this.commonTransformBelowSideRatio) this.commonTransformBelowSideRatio.transformReference = this.transformReference;\r\n        if (this.landscapeTransform) this.landscapeTransform.transformReference = this.transformReference;\r\n        if (this.landscapeTransformBelowSideRatio) this.landscapeTransformBelowSideRatio.transformReference = this.transformReference;\r\n        if (this.portraitTransform) this.portraitTransform.transformReference = this.transformReference;\r\n        if (this.portraitTransformBelowSideRatio) this.portraitTransformBelowSideRatio.transformReference = this.transformReference;\r\n    }\r\n\r\n    private subscribeEvents() {\r\n        cc.systemEvent.on(Events.WINDOW_RESIZED.toString(), this.onSizeChanged, this);\r\n    }\r\n\r\n    private getCurrentTransform(): TransformController {\r\n        let currentTransform = null;\r\n\r\n        let sideRatio = Math.max(this.settings.GAME_WIDTH, this.settings.GAME_HEIGHT) / Math.min(this.settings.GAME_WIDTH, this.settings.GAME_HEIGHT);\r\n        let isUsingTransformBelowSideRatio = this.isDependingOnSideRatio && (sideRatio < this.limitSideRatio);\r\n\r\n\r\n        if (this.isSameTransform) {\r\n            currentTransform = isUsingTransformBelowSideRatio ? this.commonTransformBelowSideRatio : this.commonTransform;\r\n        } else {\r\n            if (this.settings.IS_LANDSCAPE) {\r\n                currentTransform = isUsingTransformBelowSideRatio ? this.landscapeTransformBelowSideRatio : this.landscapeTransform;\r\n            } else {\r\n                currentTransform = isUsingTransformBelowSideRatio ? this.portraitTransformBelowSideRatio : this.portraitTransform;\r\n            }\r\n        }\r\n\r\n        return currentTransform;\r\n    }\r\n\r\n    public onSizeChanged() {\r\n        const transform = this.getCurrentTransform();\r\n        transform.setNodeTransform(this.node);\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        this.onSizeChanged();\r\n    }\r\n}\r\n","import AnchorComponent from \"./Components/AnchorComponent\";\r\nimport PositionComponent from \"./Components/PositionComponent\";\r\nimport RotationComponent from \"./Components/RotationComponent\";\r\nimport ScaleComponent from \"./Components/ScaleComponent\";\r\nimport SizeComponent from \"./Components/SizeComponent\";\r\nimport VisibilityComponent from \"./Components/VisibilityComponent\";\r\n\r\n\r\nenum TransformComponentType {\r\n    Position = 0,\r\n    Scale = 1,\r\n    Rotation = 2,\r\n    // Visibility = 3,\r\n    Anchor = 4,\r\n    Size = 5,\r\n    All = 6,\r\n    Hide = 7,\r\n};\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('TransformController')\r\nexport default class TransformController {\r\n    @property({ type: cc.Enum(TransformComponentType) }) changeValueType: TransformComponentType = TransformComponentType.Hide;\r\n\r\n    @property({ type: PositionComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Position) } }) positionComponent: PositionComponent = new PositionComponent();\r\n    @property({ type: ScaleComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Scale) } }) scaleComponent: ScaleComponent = new ScaleComponent();\r\n    @property({ type: RotationComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Rotation) } }) rotationComponent: RotationComponent = new RotationComponent();\r\n    // @property({ type: VisibilityComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Visibility) } }) visibilityComponent: VisibilityComponent = new VisibilityComponent();\r\n    @property({ type: AnchorComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Anchor) } }) anchorComponent: AnchorComponent = new AnchorComponent();\r\n    @property({ type: SizeComponent, visible() { return this.isPreferredTypeSelected(TransformComponentType.Size) } }) sizeComponent: SizeComponent = new SizeComponent();\r\n\r\n\r\n    private _transformReference: cc.Node = null;\r\n    public get transformReference(): cc.Node { return this._transformReference; }\r\n    public set transformReference(v: cc.Node) { this._transformReference = v; }\r\n\r\n    public setNodeTransform(node: cc.Node) {\r\n        this.rotationComponent.execute(node, this.transformReference);\r\n        this.positionComponent.execute(node, this.transformReference);\r\n        this.sizeComponent.execute(node, this.transformReference);\r\n        this.anchorComponent.execute(node, this.transformReference);\r\n        this.scaleComponent.execute(node, this.transformReference);\r\n        // this.visibilityComponent.execute(node, this.transformReference);\r\n    }\r\n\r\n\r\n    public clone(): TransformController {\r\n        let a = new TransformController();\r\n\r\n        a.rotationComponent.applyData(this.rotationComponent.getData())\r\n        a.positionComponent.applyData(this.positionComponent.getData());\r\n        a.sizeComponent.applyData(this.sizeComponent.getData());\r\n        a.anchorComponent.applyData(this.anchorComponent.getData());\r\n        a.scaleComponent.applyData(this.scaleComponent.getData());\r\n        // a.visibilityComponent.applyData(this.visibilityComponent.getData());\r\n\r\n        a.changeValueType = this.changeValueType;\r\n        a.transformReference = this.transformReference;\r\n\r\n        return a;\r\n    }\r\n\r\n\r\n    private isPreferredTypeSelected(type: TransformComponentType): boolean {\r\n        return this.changeValueType === type || this.changeValueType === TransformComponentType.All;\r\n    }\r\n\r\n}\r\n","\r\nexport default class Utilities {\r\n\r\n    static randomItem<T>(items: T[]): T {\r\n        return items[Math.floor(Math.random() * items.length)];\r\n    }\r\n\r\n    static getRandomInt(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    static getRandomFloat(min: number, max: number): number {\r\n        return Math.random() * (max - min + 1) + min;\r\n    }\r\n\r\n    static clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    static getRandomElementFromArray<T>(array: T[]): T {\r\n        const index: number = this.getRandomInt(0, array.length - 1);\r\n        return array[index];\r\n    }\r\n\r\n    static convertToVec3(x: number | cc.Vec2, y?: number, z?: number): cc.Vec3 {\r\n        if (x instanceof cc.Vec2) {\r\n            return new cc.Vec3(x.x, x.y);\r\n        } else {\r\n            return new cc.Vec3(x, y ? y : 0, z ? z : 0);\r\n        }\r\n    }\r\n\r\n    static getEnumKeys(e): string[] {\r\n        const keys = [];\r\n\r\n        for (const k in e) {\r\n            keys.push(k);\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    static getRandomEnumKey(e): string {\r\n        return Utilities.getRandomElementFromArray(Utilities.getEnumKeys(e));\r\n    }\r\n\r\n    static multiplySizeByScalar(s1: cc.Size, v: number): cc.Size {\r\n        return new cc.Size(s1.width * v, s1.height * v);\r\n    }\r\n}\r\n","import SimpleTransformComponent from \"../Base/SimpleTransformComponent\";\r\nimport IConfiguration from \"../Base/IConfiguration\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass('VisibilityConfiguration')\r\nclass VisibilityConfiguration implements IConfiguration {\r\n    @property(cc.Float) opacity: number = 255;\r\n    @property(cc.Color) color: cc.Color = cc.color(255, 255, 255, 255);\r\n\r\n    public applyTransform(node: cc.Node, transformReference: cc.Node) {\r\n        node.opacity = this.opacity;\r\n        node.color = this.color;\r\n    }\r\n\r\n    public getData() {\r\n        return {\r\n            opacity: this.opacity,\r\n            color: this.color.clone(),\r\n        };\r\n    }\r\n\r\n    public applyData(data: any) {\r\n        this.opacity = data.opacity;\r\n        this.color = data.color;\r\n    }\r\n}\r\n\r\n\r\n@ccclass('VisibilityComponent')\r\nexport default class VisibilityComponent extends SimpleTransformComponent {\r\n\r\n    @property({ type: VisibilityConfiguration, serializable: true, visible() { return this.isActive } }) configuration: VisibilityConfiguration = null;\r\n\r\n    public execute(node: cc.Node, transformReference: cc.Node) {\r\n        this.configuration && this.configuration.applyTransform(node, transformReference);\r\n    }\r\n\r\n    protected reset(isActive: boolean) {\r\n        this.configuration = isActive ? new VisibilityConfiguration() : null;\r\n    }\r\n\r\n}"],"file":"index.js"}